	private int next() throws IOException {
		if (!fill(8))
			return CMD_EOF;

		final int cmd = cmdbuf[cmdptr++] & 0xff;
		if ((cmd & 0x80) != 0) {
			// Determine the segment of the base which should
			// be copied into the output. The segment is given
			// as an offset and a length.
			//
			copyOffset = 0;
			if ((cmd & 0x01) != 0)
				copyOffset = cmdbuf[cmdptr++] & 0xff;
			if ((cmd & 0x02) != 0)
				copyOffset |= (cmdbuf[cmdptr++] & 0xff) << 8;
			if ((cmd & 0x04) != 0)
				copyOffset |= (cmdbuf[cmdptr++] & 0xff) << 16;
			if ((cmd & 0x08) != 0)
				copyOffset |= (cmdbuf[cmdptr++] & 0xff) << 24;

			copySize = 0;
			if ((cmd & 0x10) != 0)
				copySize = cmdbuf[cmdptr++] & 0xff;
			if ((cmd & 0x20) != 0)
				copySize |= (cmdbuf[cmdptr++] & 0xff) << 8;
			if ((cmd & 0x40) != 0)
				copySize |= (cmdbuf[cmdptr++] & 0xff) << 16;
			if (copySize == 0)
				copySize = 0x10000;
			return CMD_COPY;

		} else if (cmd != 0) {
			// Anything else the data is literal within the delta
			// itself. Page the entire thing into the cmdbuf, if
			// its not already there.
			//
			fill(cmd);
			copySize = cmd;
			return CMD_INSERT;

		} else {
			// cmd == 0 has been reserved for future encoding but
			// for now its not acceptable.
			//
			throw new CorruptObjectException(JGitText.get().unsupportedCommand0);
		}
	}

