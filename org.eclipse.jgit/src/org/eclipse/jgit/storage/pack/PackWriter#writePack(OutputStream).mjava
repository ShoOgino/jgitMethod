	/**
	 * Write the prepared pack to the supplied stream.
	 * <p>
	 * At first, this method collects and sorts objects to pack, then deltas
	 * search is performed if set up accordingly, finally pack stream is
	 * written. {@link ProgressMonitor} tasks {@value #SEARCHING_REUSE_PROGRESS}
	 * (only if reuseDeltas or reuseObjects is enabled) and
	 * {@value #WRITING_OBJECTS_PROGRESS} are updated during packing.
	 * </p>
	 * <p>
	 * All reused objects data checksum (Adler32/CRC32) is computed and
	 * validated against existing checksum.
	 * </p>
	 *
	 * @param packStream
	 *            output stream of pack data. The stream should be buffered by
	 *            the caller. The caller is responsible for closing the stream.
	 * @throws IOException
	 *             an error occurred reading a local object's data to include in
	 *             the pack, or writing compressed object data to the output
	 *             stream.
	 */
	public void writePack(OutputStream packStream) throws IOException {
		if ((reuseDeltas || reuseObjects) && reuseSupport != null)
			searchForReuse();

		final PackOutputStream out = new PackOutputStream(packStream,
				isDeltaBaseAsOffset());

		writeMonitor.beginTask(WRITING_OBJECTS_PROGRESS, getObjectsNumber());
		out.writeFileHeader(PACK_VERSION_GENERATED, getObjectsNumber());
		writeObjects(out);
		writeChecksum(out);

		reader.release();
		writeMonitor.endTask();
	}

