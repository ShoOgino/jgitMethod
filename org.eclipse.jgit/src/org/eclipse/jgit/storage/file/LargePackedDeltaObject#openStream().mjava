	@Override
	public ObjectStream openStream() throws MissingObjectException, IOException {
		// If the object was recently unpacked, its available loose.
		// The loose format is going to be faster to access than a
		// delta applied on top of a base. Use that whenever we can.
		//
		final ObjectId myId = getObjectId();
		final WindowCursor wc = new WindowCursor(db);
		ObjectLoader ldr = db.openObject2(wc, myId.name(), myId);
		if (ldr != null)
			return ldr.openStream();

		InputStream in = open(wc);
		in = new BufferedInputStream(in, 8192);

		// While we inflate the object, also deflate it back as a loose
		// object. This will later be cleaned up by a gc pass, but until
		// then we will reuse the loose form by the above code path.
		//
		int myType = getType();
		long mySize = getSize();
		final ObjectDirectoryInserter odi = db.newInserter();
		final File tmp = odi.newTempFile();
		DeflaterOutputStream dOut = odi.compress(new FileOutputStream(tmp));
		odi.writeHeader(dOut, myType, mySize);

		in = new TeeInputStream(in, dOut);
		return new ObjectStream.Filter(myType, mySize, in) {
			@Override
			public void close() throws IOException {
				super.close();

				odi.release();
				wc.release();
				db.insertUnpackedObject(tmp, myId, true /* force creation */);
			}
		};
	}

