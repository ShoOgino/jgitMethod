	private InputStream open(final WindowCursor wc)
			throws MissingObjectException, IOException,
			IncorrectObjectTypeException {
		InputStream delta;
		try {
			delta = new PackInputStream(pack, objectOffset + headerLength, wc);
		} catch (IOException packGone) {
			// If the pack file cannot be pinned into the cursor, it
			// probably was repacked recently. Go find the object
			// again and open the stream from that location instead.
			//
			return wc.open(getObjectId()).openStream();
		}
		delta = new InflaterInputStream(delta);

		final ObjectLoader base = pack.load(wc, baseOffset);
		DeltaStream ds = new DeltaStream(delta) {
			private long baseSize = SIZE_UNKNOWN;
			private TemporaryBuffer.LocalFile buffer;

			@Override
			protected InputStream openBase() throws IOException {
				if (buffer != null)
					return buffer.openInputStream();

				InputStream in;
				if (base instanceof LargePackedDeltaObject)
					in = ((LargePackedDeltaObject) base).open(wc);
				else
					in = base.openStream();
				if (baseSize == SIZE_UNKNOWN) {
					if (in instanceof DeltaStream)
						baseSize = ((DeltaStream) in).getSize();
					else if (in instanceof ObjectStream)
						baseSize = ((ObjectStream) in).getSize();
				}

				buffer = new TemporaryBuffer.LocalFile(db.getDirectory());
				return new TeeInputStream(in, buffer);
			}

			@Override
			protected long getBaseSize() throws IOException {
				if (baseSize == SIZE_UNKNOWN) {
					// This code path should never be used as DeltaStream
					// is supposed to open the stream first, which would
					// initialize the size for us directly from the stream.
					baseSize = base.getSize();
				}
				return baseSize;
			}

			@Override
			public void close() throws IOException {
				super.close();
				if (buffer != null)
					buffer.destroy();
			}
		};
		if (size == SIZE_UNKNOWN)
			size = ds.getSize();
		return ds;
	}

