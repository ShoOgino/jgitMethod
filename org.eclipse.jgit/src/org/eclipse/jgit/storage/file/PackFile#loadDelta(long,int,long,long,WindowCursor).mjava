	private ObjectLoader loadDelta(long posSelf, int hdrLen, long sz,
			long posBase, WindowCursor curs) throws IOException,
			DataFormatException {
		if (curs.getStreamFileThreshold() <= sz) {
			// The delta instruction stream itself is pretty big, and
			// that implies the resulting object is going to be massive.
			// Use only the large delta format here.
			//
			return new LargePackedDeltaObject(posSelf, posBase, hdrLen, //
					this, curs.db);
		}

		byte[] data;
		int type;

		UnpackedObjectCache.Entry e = readCache(posBase);
		if (e != null) {
			data = e.data;
			type = e.type;
		} else {
			ObjectLoader p = load(curs, posBase);
			if (p.isLarge()) {
				// The base itself is large. We have to produce a large
				// delta stream as we don't want to build the whole base.
				//
				return new LargePackedDeltaObject(posSelf, posBase, hdrLen,
						this, curs.db);
			}
			data = p.getCachedBytes();
			type = p.getType();
			saveCache(posBase, data, type);
		}

		// At this point we have the base, and its small, and the delta
		// stream also is small, so the result object cannot be more than
		// 2x our small size. This occurs if the delta instructions were
		// "copy entire base, literal insert entire delta". Go with the
		// faster small object style at this point.
		//
		data = BinaryDelta.apply(data, decompress(posSelf + hdrLen, sz, curs));
		return new ObjectLoader.SmallObject(type, data);
	}

