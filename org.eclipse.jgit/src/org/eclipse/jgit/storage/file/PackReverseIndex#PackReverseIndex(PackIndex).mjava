	/**
	 * Create reverse index from straight/forward pack index, by indexing all
	 * its entries.
	 *
	 * @param packIndex
	 *            forward index - entries to (reverse) index.
	 */
	public PackReverseIndex(final PackIndex packIndex) {
		index = packIndex;

		final long cnt = index.getObjectCount();
		final long n64 = index.getOffset64Count();
		final long n32 = cnt - n64;
		if (n32 > Integer.MAX_VALUE || n64 > Integer.MAX_VALUE
				|| cnt > 0xffffffffL)
			throw new IllegalArgumentException(
					JGitText.get().hugeIndexesAreNotSupportedByJgitYet);

		offsets32 = new int[(int) n32];
		offsets64 = new long[(int) n64];
		nth32 = new int[offsets32.length];
		nth64 = new int[offsets64.length];

		int i32 = 0;
		int i64 = 0;
		for (final MutableEntry me : index) {
			final long o = me.getOffset();
			if (o < Integer.MAX_VALUE)
				offsets32[i32++] = (int) o;
			else
				offsets64[i64++] = o;
		}

		Arrays.sort(offsets32);
		Arrays.sort(offsets64);

		int nth = 0;
		for (final MutableEntry me : index) {
			final long o = me.getOffset();
			if (o < Integer.MAX_VALUE)
				nth32[Arrays.binarySearch(offsets32, (int) o)] = nth++;
			else
				nth64[Arrays.binarySearch(offsets64, o)] = nth++;
		}
	}

