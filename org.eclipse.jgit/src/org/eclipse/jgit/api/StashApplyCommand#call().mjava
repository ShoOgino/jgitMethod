	/**
	 * Apply the changes in a stashed commit to the working directory and index
	 *
	 * @return id of stashed commit that was applied
	 */
	public ObjectId call() throws GitAPIException {
		checkCallable();

		if (repo.getRepositoryState() != RepositoryState.SAFE)
			throw new WrongRepositoryStateException(MessageFormat.format(
					JGitText.get().stashApplyOnUnsafeRepository,
					repo.getRepositoryState()));

		final ObjectId headTree = getHeadTree();
		final ObjectId stashId = getStashId();

		ObjectReader reader = repo.newObjectReader();
		try {
			RevWalk revWalk = new RevWalk(reader);
			RevCommit stashCommit = revWalk.parseCommit(stashId);
			if (stashCommit.getParentCount() != 2)
				throw new JGitInternalException(MessageFormat.format(
						JGitText.get().stashCommitMissingTwoParents,
						stashId.name()));

			RevTree stashWorkingTree = stashCommit.getTree();
			RevTree stashIndexTree = revWalk.parseCommit(
					stashCommit.getParent(1)).getTree();
			RevTree stashHeadTree = revWalk.parseCommit(
					stashCommit.getParent(0)).getTree();

			CanonicalTreeParser stashWorkingIter = new CanonicalTreeParser();
			stashWorkingIter.reset(reader, stashWorkingTree);
			CanonicalTreeParser stashIndexIter = new CanonicalTreeParser();
			stashIndexIter.reset(reader, stashIndexTree);
			CanonicalTreeParser stashHeadIter = new CanonicalTreeParser();
			stashHeadIter.reset(reader, stashHeadTree);
			CanonicalTreeParser headIter = new CanonicalTreeParser();
			headIter.reset(reader, headTree);

			DirCache cache = repo.lockDirCache();
			DirCacheEditor editor = cache.editor();
			try {
				DirCacheIterator indexIter = new DirCacheIterator(cache);
				FileTreeIterator workingIter = new FileTreeIterator(repo);

				TreeWalk treeWalk = new TreeWalk(reader);
				treeWalk.setRecursive(true);
				treeWalk.setFilter(new StashDiffFilter());

				treeWalk.addTree(stashHeadIter);
				treeWalk.addTree(stashIndexIter);
				treeWalk.addTree(stashWorkingIter);
				treeWalk.addTree(headIter);
				treeWalk.addTree(indexIter);
				treeWalk.addTree(workingIter);

				scanForConflicts(treeWalk);

				// Reset trees and walk
				treeWalk.reset();
				stashWorkingIter.reset(reader, stashWorkingTree);
				stashIndexIter.reset(reader, stashIndexTree);
				stashHeadIter.reset(reader, stashHeadTree);
				treeWalk.addTree(stashHeadIter);
				treeWalk.addTree(stashIndexIter);
				treeWalk.addTree(stashWorkingIter);

				applyChanges(treeWalk, cache, editor);
			} finally {
				editor.commit();
				cache.unlock();
			}
		} catch (JGitInternalException e) {
			throw e;
		} catch (IOException e) {
			throw new JGitInternalException(JGitText.get().stashApplyFailed, e);
		} finally {
			reader.release();
		}
		return stashId;
	}

