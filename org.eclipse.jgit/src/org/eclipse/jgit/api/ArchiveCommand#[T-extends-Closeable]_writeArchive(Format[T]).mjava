	private <T extends Closeable>
	OutputStream writeArchive(Format<T> fmt) throws GitAPIException {
		final TreeWalk walk = new TreeWalk(repo);
		try {
			final T outa = fmt.createArchiveOutputStream(out);
			try {
				final MutableObjectId idBuf = new MutableObjectId();
				final ObjectReader reader = walk.getObjectReader();
				final RevWalk rw = new RevWalk(walk.getObjectReader());

				walk.reset(rw.parseTree(tree));
				walk.setRecursive(true);
				while (walk.next()) {
					final String name = walk.getPathString();
					final FileMode mode = walk.getFileMode(0);

					if (mode == FileMode.TREE)
						// ZIP entries for directories are optional.
						// Leave them out, mimicking "git archive".
						continue;

					walk.getObjectId(idBuf, 0);
					fmt.putEntry(outa, name, mode, reader.open(idBuf));
				}
			} finally {
				outa.close();
			}
			return out;
		} catch (IOException e) {
			// TODO(jrn): Throw finer-grained errors.
			throw new JGitInternalException(
					JGitText.get().exceptionCaughtDuringExecutionOfArchiveCommand, e);
		} finally {
			walk.release();
		}
	}

