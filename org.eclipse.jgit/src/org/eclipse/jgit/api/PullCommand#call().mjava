	/**
	 * Executes the {@code Pull} command with all the options and parameters
	 * collected by the setter methods (e.g.
	 * {@link #setProgressMonitor(ProgressMonitor)}) of this class. Each
	 * instance of this class should only be used for one invocation of the
	 * command. Don't call this method twice on an instance.
	 *
	 * @return the result of the pull
	 */
	public PullResult call() throws WrongRepositoryStateException,
			InvalidConfigurationException, DetachedHeadException,
			InvalidRemoteException, CanceledException {
		checkCallable();

		monitor.beginTask(JGitText.get().pullTaskName, 2);

		String branchName;
		try {
			String fullBranch = repo.getFullBranch();
			if (!fullBranch.startsWith(Constants.R_HEADS)) {
				// we can not pull if HEAD is detached and branch is not
				// specified explicitly
				throw new DetachedHeadException();
			}
			branchName = fullBranch.substring(Constants.R_HEADS.length());
		} catch (IOException e) {
			throw new JGitInternalException(
					JGitText.get().exceptionCaughtDuringExecutionOfPullCommand,
					e);
		}

		if (!repo.getRepositoryState().equals(RepositoryState.SAFE))
			throw new WrongRepositoryStateException(MessageFormat.format(
					JGitText.get().cannotPullOnARepoWithState, repo
							.getRepositoryState().name()));

		// get the configured remote for the currently checked out branch
		// stored in configuration key branch.<branch name>.remote
		Config repoConfig = repo.getConfig();
		final String remote = repoConfig.getString(
				ConfigConstants.CONFIG_BRANCH_SECTION, branchName,
				ConfigConstants.CONFIG_KEY_REMOTE);
		if (remote == null) {
			String missingKey = ConfigConstants.CONFIG_BRANCH_SECTION + DOT
					+ branchName + DOT + ConfigConstants.CONFIG_KEY_REMOTE;
			throw new InvalidConfigurationException(MessageFormat.format(
					JGitText.get().missingConfigurationForKey, missingKey));
		}
		final String remoteUri = repo.getConfig().getString("remote", remote,
				ConfigConstants.CONFIG_KEY_URL);
		if (remoteUri == null) {
			String missingKey = ConfigConstants.CONFIG_REMOTE_SECTION + DOT
					+ remote + DOT + ConfigConstants.CONFIG_KEY_URL;
			throw new InvalidConfigurationException(MessageFormat.format(
					JGitText.get().missingConfigurationForKey, missingKey));
		}

		// get the name of the branch in the remote repository
		// stored in configuration key branch.<branch name>.merge
		String remoteBranchName = repoConfig.getString(
				ConfigConstants.CONFIG_BRANCH_SECTION, branchName,
				ConfigConstants.CONFIG_KEY_MERGE);
		if (remoteBranchName == null) {
			// check if the branch is configured for pull-rebase
			remoteBranchName = repoConfig.getString(
					ConfigConstants.CONFIG_BRANCH_SECTION, branchName,
					ConfigConstants.CONFIG_KEY_MERGE);
			if (remoteBranchName != null) {
				// TODO implement pull-rebase
				throw new JGitInternalException(
						"Pull with rebase is not yet supported");
			}
		}
		if (remoteBranchName == null) {
			String missingKey = ConfigConstants.CONFIG_BRANCH_SECTION + DOT
					+ branchName + DOT + ConfigConstants.CONFIG_KEY_MERGE;
			throw new InvalidConfigurationException(MessageFormat.format(
					JGitText.get().missingConfigurationForKey, missingKey));
		}

		if (monitor.isCancelled())
			throw new CanceledException(MessageFormat.format(
					JGitText.get().operationCanceled,
					JGitText.get().pullTaskName));

		FetchCommand fetch = new FetchCommand(repo);
		fetch.setRemote(remote);
		if (monitor != null)
			fetch.setProgressMonitor(monitor);
		fetch.setTimeout(this.timeout);

		FetchResult fetchRes = fetch.call();

		monitor.update(1);

		// we check the updates to see which of the updated branches corresponds
		// to the remote branch name

		AnyObjectId commitToMerge = null;

		Ref r = fetchRes.getAdvertisedRef(remoteBranchName);
		if (r == null)
			r = fetchRes.getAdvertisedRef(Constants.R_HEADS + remoteBranchName);
		if (r == null) {
			// TODO: we should be able to get the mapping also if nothing was
			// updated by the fetch; for the time being, use the naming
			// convention as fall back
			String remoteTrackingBranch = Constants.R_REMOTES + remote + '/'
					+ branchName;
			try {
				commitToMerge = repo.resolve(remoteTrackingBranch);
			} catch (IOException e) {
				throw new JGitInternalException(
						JGitText.get().exceptionCaughtDuringExecutionOfPullCommand,
						e);
			}

		} else
			commitToMerge = r.getObjectId();

		if (monitor.isCancelled())
			throw new CanceledException(MessageFormat.format(
					JGitText.get().operationCanceled,
					JGitText.get().pullTaskName));

		MergeCommand merge = new MergeCommand(repo);
		merge.include("branch \'" + remoteBranchName + "\' of " + remoteUri,
				commitToMerge);
		MergeResult mergeRes;
		try {
			mergeRes = merge.call();
			monitor.update(1);
		} catch (NoHeadException e) {
			throw new JGitInternalException(e.getMessage(), e);
		} catch (ConcurrentRefUpdateException e) {
			throw new JGitInternalException(e.getMessage(), e);
		} catch (CheckoutConflictException e) {
			throw new JGitInternalException(e.getMessage(), e);
		} catch (InvalidMergeHeadsException e) {
			throw new JGitInternalException(e.getMessage(), e);
		} catch (WrongRepositoryStateException e) {
			throw new JGitInternalException(e.getMessage(), e);
		} catch (NoMessageException e) {
			throw new JGitInternalException(e.getMessage(), e);
		}
		monitor.endTask();
		return new PullResult(fetchRes, remote, mergeRes);
	}

