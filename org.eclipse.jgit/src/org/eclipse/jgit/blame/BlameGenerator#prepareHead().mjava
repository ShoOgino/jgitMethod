	/**
	 * Pushes HEAD, index, and working tree as appropriate for blaming the file
	 * given in the constructor {@link #BlameGenerator(Repository, String)}
	 * against HEAD. Includes special handling in case the file is in conflict
	 * state from an unresolved merge conflict.
	 *
	 * @return {@code this}
	 * @throws NoHeadException
	 *             if the repository has no HEAD
	 * @throws IOException
	 *             if an error occurs
	 * @since 5.6
	 */
	public BlameGenerator prepareHead() throws NoHeadException, IOException {
		Repository repo = getRepository();
		ObjectId head = repo.resolve(Constants.HEAD);
		if (head == null) {
			throw new NoHeadException(MessageFormat
					.format(JGitText.get().noSuchRefKnown, Constants.HEAD));
		}
		if (repo.isBare()) {
			return push(null, head);
		}
		DirCache dc = repo.readDirCache();
		try (TreeWalk walk = new TreeWalk(repo)) {
			walk.setOperationType(OperationType.CHECKIN_OP);
			FileTreeIterator iter = new FileTreeIterator(repo);
			int fileTree = walk.addTree(iter);
			int indexTree = walk.addTree(new DirCacheIterator(dc));
			iter.setDirCacheIterator(walk, indexTree);
			walk.setFilter(resultPath);
			walk.setRecursive(true);
			if (!walk.next()) {
				return this;
			}
			DirCacheIterator dcIter = walk.getTree(indexTree,
					DirCacheIterator.class);
			if (dcIter == null) {
				// Not found in index
				return this;
			}
			iter = walk.getTree(fileTree, FileTreeIterator.class);
			if (iter == null || !isFile(iter.getEntryRawMode())) {
				return this;
			}
			RawText inTree;
			long filteredLength = iter.getEntryContentLength();
			try (InputStream stream = iter.openEntryStream()) {
				inTree = new RawText(getBytes(iter.getEntryFile().getPath(),
						stream, filteredLength));
			}
			DirCacheEntry indexEntry = dcIter.getDirCacheEntry();
			if (indexEntry.getStage() == DirCacheEntry.STAGE_0) {
				push(null, head);
				push(null, indexEntry.getObjectId());
				push(null, inTree);
			} else {
				// Create a special candidate using the working tree file as
				// blob and HEAD and the MERGE_HEADs as parents.
				HeadCandidate c = new HeadCandidate(getRepository(), resultPath,
						getHeads(repo, head));
				c.sourceText = inTree;
				c.regionList = new Region(0, 0, inTree.size());
				remaining = inTree.size();
				push(c);
			}
		}
		return this;
	}

