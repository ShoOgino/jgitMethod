	/**
	 * Ensure this list contains at least a specified number of commits.
	 * <p>
	 * The revision walker specified by {@link #source(RevWalk)} is pumped until
	 * the given number of commits are contained in this list. If there are
	 * fewer total commits available from the walk then the method will return
	 * early. Callers can test the final size of the list by {@link #size()} to
	 * determine if the high water mark specified was met.
	 *
	 * @param highMark
	 *            number of commits the caller wants this list to contain when
	 *            the fill operation is complete.
	 * @throws IOException
	 *             see {@link RevWalk#next()}
	 * @throws IncorrectObjectTypeException
	 *             see {@link RevWalk#next()}
	 * @throws MissingObjectException
	 *             see {@link RevWalk#next()}
	 */
	public void fillTo(final int highMark) throws MissingObjectException,
			IncorrectObjectTypeException, IOException {
		if (walker == null || size > highMark)
			return;

		Generator p = walker.pending;
		RevCommit c = p.next();
		if (c == null) {
			walker.pending = EndGenerator.INSTANCE;
			walker = null;
			return;
		}
		enter(size, (E) c);
		add((E) c);
		p = walker.pending;

		while (size <= highMark) {
			int index = size;
			Block s = contents;
			while (index >> s.shift >= BLOCK_SIZE) {
				s = new Block(s.shift + BLOCK_SHIFT);
				s.contents[0] = contents;
				contents = s;
			}
			while (s.shift > 0) {
				final int i = index >> s.shift;
				index -= i << s.shift;
				if (s.contents[i] == null)
					s.contents[i] = new Block(s.shift - BLOCK_SHIFT);
				s = (Block) s.contents[i];
			}

			final Object[] dst = s.contents;
			while (size <= highMark && index < BLOCK_SIZE) {
				c = p.next();
				if (c == null) {
					walker.pending = EndGenerator.INSTANCE;
					walker = null;
					return;
				}
				enter(size++, (E) c);
				dst[index++] = c;
			}
		}
	}

