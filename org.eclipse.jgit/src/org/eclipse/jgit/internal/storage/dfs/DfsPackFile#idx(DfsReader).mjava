	private PackIndex idx(DfsReader ctx) throws IOException {
		DfsBlockCache.Ref<PackIndex> idxref = index;
		if (idxref != null) {
			PackIndex idx = idxref.get();
			if (idx != null)
				return idx;
		}

		if (invalid)
			throw new PackInvalidException(getFileName());

		Repository.getGlobalListenerList()
				.dispatch(new BeforeDfsPackIndexLoadedEvent(this));

		synchronized (initLock) {
			idxref = index;
			if (idxref != null) {
				PackIndex idx = idxref.get();
				if (idx != null)
					return idx;
			}

			PackIndex idx;
			try {
				ctx.stats.readIdx++;
				long start = System.nanoTime();
				ReadableChannel rc = ctx.db.openFile(packDesc, INDEX);
				try {
					InputStream in = Channels.newInputStream(rc);
					int wantSize = 8192;
					int bs = rc.blockSize();
					if (0 < bs && bs < wantSize)
						bs = (wantSize / bs) * bs;
					else if (bs <= 0)
						bs = wantSize;
					idx = PackIndex.read(new BufferedInputStream(in, bs));
					ctx.stats.readIdxBytes += rc.position();
				} finally {
					rc.close();
					ctx.stats.readIdxMicros += elapsedMicros(start);
				}
			} catch (EOFException e) {
				invalid = true;
				IOException e2 = new IOException(MessageFormat.format(
						DfsText.get().shortReadOfIndex,
						packDesc.getFileName(INDEX)));
				e2.initCause(e);
				throw e2;
			} catch (IOException e) {
				invalid = true;
				IOException e2 = new IOException(MessageFormat.format(
						DfsText.get().cannotReadIndex,
						packDesc.getFileName(INDEX)));
				e2.initCause(e);
				throw e2;
			}

			setPackIndex(idx);
			return idx;
		}
	}

