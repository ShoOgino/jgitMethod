	private boolean packIsExpiredGarbage(DfsPackDescription d,
			long mostRecentGC, long now) {
		// It should be safe to remove an UNREACHABLE_GARBAGE pack if it:
		//
		// (a) Predates the most recent prior run of this class. This check
		// ensures the graph traversal algorithm had a chance to consider
		// all objects in this pack and copied them into a GC or GC_REST
		// pack if the graph contained live edges to the objects.
		//
		// This check is safe because of the ordering of packing; the GC
		// packs are written first and then the UNREACHABLE_GARBAGE is
		// constructed. Any UNREACHABLE_GARBAGE dated earlier than the GC
		// was input to the prior GC's graph traversal.
		//
		// (b) Is older than garbagePackTtl. This check gives concurrent
		// inserter threads sufficient time to identify an object is not
		// in the graph and should have a new copy written, rather than
		// relying on something from an UNREACHABLE_GARBAGE pack.
		//
		// Both (a) and (b) must be met to safely remove UNREACHABLE_GARBAGE.
		return d.getPackSource() == UNREACHABLE_GARBAGE
				&& d.getLastModified() < mostRecentGC
				&& garbageTtlMillis > 0
				&& now - d.getLastModified() >= garbageTtlMillis;
	}

