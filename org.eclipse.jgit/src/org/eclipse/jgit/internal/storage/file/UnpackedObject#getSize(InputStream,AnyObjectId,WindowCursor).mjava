	static long getSize(InputStream in, AnyObjectId id, WindowCursor wc)
			throws IOException {
		try {
			in = buffer(in);
			in.mark(20);
			final byte[] hdr = new byte[64];
			IO.readFully(in, hdr, 0, 2);

			if (isStandardFormat(hdr)) {
				in.reset();
				Inflater inf = wc.inflater();
				InputStream zIn = inflate(in, inf);
				int avail = readSome(zIn, hdr, 0, 64);
				if (avail < 5)
					throw new CorruptObjectException(id,
							JGitText.get().corruptObjectNoHeader);

				final MutableInteger p = new MutableInteger();
				Constants.decodeTypeString(id, hdr, (byte) ' ', p);
				long size = RawParseUtils.parseLongBase10(hdr, p.value, p);
				if (size < 0)
					throw new CorruptObjectException(id,
							JGitText.get().corruptObjectNegativeSize);
				return size;

			}
			readSome(in, hdr, 2, 18);
			int c = hdr[0] & 0xff;
			long size = c & 15;
			int shift = 4;
			int p = 1;
			while ((c & 0x80) != 0) {
				c = hdr[p++] & 0xff;
				size += ((long) (c & 0x7f)) << shift;
				shift += 7;
			}
			return size;
		} catch (ZipException badStream) {
			CorruptObjectException coe = new CorruptObjectException(id,
					JGitText.get().corruptObjectBadStream);
			coe.initCause(badStream);
			throw coe;
		}
	}

