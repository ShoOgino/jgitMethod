	/**
	 * Get the {@link AttributesNode} for the current entry.
	 * <p>
	 * This method implements the fallback mechanism between the index and the
	 * working tree depending on the operation type
	 * </p>
	 *
	 * @param opType
	 * @param workingTreeIterator
	 * @param dirCacheIterator
	 * @param other
	 * @return a {@link AttributesNode} of the current entry,
	 *         {@link NullPointerException} otherwise.
	 * @throws IOException
	 *             It raises an {@link IOException} if a problem appears while
	 *             parsing one on the attributes file.
	 */
	private AttributesNode getCurrentAttributesNode(OperationType opType,
			@Nullable WorkingTreeIterator workingTreeIterator,
			@Nullable DirCacheIterator dirCacheIterator,
			@Nullable CanonicalTreeParser other)
					throws IOException {
		AttributesNode attributesNode = null;
		switch (opType) {
		case CHECKIN_OP:
			if (workingTreeIterator != null) {
				attributesNode = workingTreeIterator.getEntryAttributesNode();
			}
			if (attributesNode == null && dirCacheIterator != null) {
				attributesNode = getAttributesNode(dirCacheIterator
						.getEntryAttributesNode(getObjectReader()),
						attributesNode);
			}
			if (attributesNode == null && other != null) {
				attributesNode = getAttributesNode(
						other.getEntryAttributesNode(getObjectReader()),
						attributesNode);
			}
			break;
		case CHECKOUT_OP:
			if (other != null) {
				attributesNode = other
						.getEntryAttributesNode(getObjectReader());
			}
			if (dirCacheIterator != null) {
				attributesNode = getAttributesNode(dirCacheIterator
						.getEntryAttributesNode(getObjectReader()),
						attributesNode);
			}
			if (attributesNode == null && workingTreeIterator != null) {
				attributesNode = getAttributesNode(
						workingTreeIterator.getEntryAttributesNode(),
						attributesNode);
			}
			break;
		default:
			throw new IllegalStateException(
					"The only supported operation types are:" //$NON-NLS-1$
							+ OperationType.CHECKIN_OP + "," //$NON-NLS-1$
							+ OperationType.CHECKOUT_OP);
		}

		return attributesNode;
	}

