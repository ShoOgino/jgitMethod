	/**
	 * Test the filters against the walk. Returns a bitmask where each bit
	 * represents the result of a call to {@link TreeFilter#include(TreeWalk)},
	 * ordered by the index for which the tree filters were passed in the
	 * constructor.
	 *
	 * @param walk
	 *            the walk from which to test the current entry
	 * @return the marks bitmask
	 * @throws MissingObjectException
	 *             as thrown by {@link TreeFilter#include(TreeWalk)}
	 * @throws IncorrectObjectTypeException
	 *             as thrown by {@link TreeFilter#include(TreeWalk)}
	 * @throws IOException
	 *             as thrown by {@link TreeFilter#include(TreeWalk)}
	 */
	public int getMarks(TreeWalk walk) throws MissingObjectException,
			IncorrectObjectTypeException, IOException {
		int marks = 0;
		for (int index = 0; index < filters.length; index++) {
			TreeFilter filter = filters[index];
			if (filter != null) {
				try {
					boolean marked = filter.include(walk);
					if (marked)
						marks |= (1L << index);
				} catch (StopWalkException e) {
					// Don't check tree filter anymore, it will no longer
					// match
					filters[index] = null;
				}
			}
		}
		return marks;
	}

