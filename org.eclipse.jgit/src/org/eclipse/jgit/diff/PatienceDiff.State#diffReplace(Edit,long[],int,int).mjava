		void diffReplace(Edit r, long[] pCommon, int pIdx, int pEnd) {
			PatienceDiffIndex<S> p;
			Edit lcs;

			p = new PatienceDiffIndex<S>(cmp, a, b, r, pCommon, pIdx, pEnd);
			lcs = p.findLongestCommonSequence();

			if (lcs != null) {
				pCommon = p.nCommon;
				pIdx = p.cIdx;
				pEnd = p.nCnt;
				p = null;

				diff(r.before(lcs), pCommon, 0, pIdx);
				diff(r.after(lcs), pCommon, pIdx + 1, pEnd);

			} else if (fallback != null) {
				pCommon = null;
				p = null;

				SubsequenceComparator<HashedSequence<S>> cs = subcmp();
				Subsequence<HashedSequence<S>> as = Subsequence.a(a, r);
				Subsequence<HashedSequence<S>> bs = Subsequence.b(b, r);

				EditList res = fallback.diffNonCommon(cs, as, bs);
				edits.addAll(Subsequence.toBase(res, as, bs));

			} else {
				edits.add(r);
			}
		}

