	PatienceDiffIndex(HashedSequenceComparator<S> cmp, //
			HashedSequence<S> a, //
			HashedSequence<S> b, //
			Edit region, //
			long[] pCommon, int pIdx, int pCnt) {
		this.cmp = cmp;
		this.a = a;
		this.b = b;
		this.region = region;
		this.pCommon = pCommon;
		this.pBegin = pIdx;
		this.pEnd = pCnt;

		final int blockCnt = region.getLengthB();
		if (blockCnt < 1) {
			table = new int[] {};
			tableMask = 0;

			hash = new int[] {};
			ptrs = new long[] {};
			next = new int[] {};

		} else {
			table = new int[tableSize(blockCnt)];
			tableMask = table.length - 1;

			// As we insert elements we preincrement so that 0 is never a
			// valid entry. Therefore we have to allocate one extra space.
			//
			hash = new int[1 + blockCnt];
			ptrs = new long[hash.length];
			next = new int[hash.length];
		}
	}

