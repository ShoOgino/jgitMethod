	/**
	 * Construct the merge commit message.
	 *
	 * @param refsToMerge
	 *            the refs which will be merged
	 * @param target
	 *            the branch ref which will be merged into
	 * @return merge commit message
	 */
	public String format(List<Ref> refsToMerge, Ref target) {
		StringBuilder sb = new StringBuilder();
		sb.append("Merge ");

		List<String> branches = new ArrayList<String>();
		List<String> remoteBranches = new ArrayList<String>();
		List<String> tags = new ArrayList<String>();
		List<String> commits = new ArrayList<String>();
		List<String> others = new ArrayList<String>();
		for (Ref ref : refsToMerge) {
			if (ref.getName().startsWith(Constants.R_HEADS))
				branches.add("'" + Repository.shortenRefName(ref.getName())
						+ "'");

			else if (ref.getName().startsWith(Constants.R_REMOTES))
				remoteBranches.add("'"
						+ Repository.shortenRefName(ref.getName()) + "'");

			else if (ref.getName().startsWith(Constants.R_TAGS))
				tags.add("'" + Repository.shortenRefName(ref.getName()) + "'");

			else if (ref.getName().equals(ref.getObjectId().getName()))
				commits.add("'" + ref.getName() + "'");

			else
				others.add(ref.getName());
		}

		List<String> listings = new ArrayList<String>();

		if (!branches.isEmpty())
			listings.add(joinNames(branches, "branch", "branches"));

		if (!remoteBranches.isEmpty())
			listings.add(joinNames(remoteBranches, "remote branch",
					"remote branches"));

		if (!tags.isEmpty())
			listings.add(joinNames(tags, "tag", "tags"));

		if (!commits.isEmpty())
			listings.add(joinNames(commits, "commit", "commits"));

		if (!others.isEmpty())
			listings.add(StringUtils.join(others, ", ", " and "));

		sb.append(StringUtils.join(listings, ", "));

		String targetName = target.getLeaf().getName();
		if (!targetName.equals(Constants.R_HEADS + Constants.MASTER)) {
			String targetShortName = Repository.shortenRefName(targetName);
			sb.append(" into " + targetShortName);
		}

		return sb.toString();
	}

