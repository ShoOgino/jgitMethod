	/**
	 * Formats the results of a merge of {@link org.eclipse.jgit.diff.RawText}
	 * objects in a Git conformant way. This method also assumes that the
	 * {@link org.eclipse.jgit.diff.RawText} objects being merged are line
	 * oriented files which use LF as delimiter. This method will also use LF to
	 * separate chunks and conflict metadata, therefore it fits only to texts
	 * that are LF-separated lines.
	 *
	 * @param out
	 *            the output stream where to write the textual presentation
	 * @param res
	 *            the merge result which should be presented
	 * @param seqName
	 *            When a conflict is reported each conflicting range will get a
	 *            name. This name is following the "&lt;&lt;&lt;&lt;&lt;&lt;&lt;
	 *            " or "&gt;&gt;&gt;&gt;&gt;&gt;&gt; " conflict markers. The
	 *            names for the sequences are given in this list
	 * @param charset
	 *            the character set used when writing conflict metadata
	 * @throws java.io.IOException
	 * @since 5.2
	 */
	public void formatMerge(OutputStream out, MergeResult<RawText> res,
			List<String> seqName, Charset charset) throws IOException {
		new MergeFormatterPass(out, res, seqName, charset).formatMerge();
	}

