	// tries to parse a string with a relative time specification
	@SuppressWarnings("nls")
	private static Date parse_relative(String dateStr, Calendar now) {
		Calendar cal;
		SystemReader sysRead = SystemReader.getInstance();

		// check for the static words "yesterday" or "now"
		if ("now".equals(dateStr)) {
			return ((now == null) ? new Date(sysRead.getCurrentTime()) : now
					.getTime());
		}

		if (now == null) {
			cal = new GregorianCalendar(sysRead.getTimeZone(),
					sysRead.getLocale());
			cal.setTimeInMillis(sysRead.getCurrentTime());
		} else
			cal = (Calendar) now.clone();

		if ("yesterday".equals(dateStr)) {
			cal.add(Calendar.DATE, -1);
			cal.set(Calendar.HOUR_OF_DAY, 0);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			cal.set(Calendar.MILLISECOND, 0);
			return cal.getTime();
		}

		// parse constructs like "3 days ago", "5.week.2.day.ago"
		String[] parts = dateStr.split("\\.| ");
		int partsLength = parts.length;
		// check we have an odd number of parts (at least 3) and that the last
		// part is "ago"
		if (partsLength < 3 || (partsLength & 1) == 0
				|| !"ago".equals(parts[parts.length - 1]))
			return null;
		int number;
		for (int i = 0; i < parts.length - 2; i += 2) {
			try {
				number = Integer.parseInt(parts[i]);
			} catch (NumberFormatException e) {
				return null;
			}
			if (parts[i + 1] == null){
				return null;
			}
			switch (parts[i + 1]) {
			case "year":
			case "years":
				cal.add(Calendar.YEAR, -number);
				break;
			case "month":
			case "months":
				cal.add(Calendar.MONTH, -number);
				break;
			case "week":
			case "weeks":
				cal.add(Calendar.WEEK_OF_YEAR, -number);
				break;
			case "day":
			case "days":
				cal.add(Calendar.DATE, -number);
				break;
			case "hour":
			case "hours":
				cal.add(Calendar.HOUR_OF_DAY, -number);
				break;
			case "minute":
			case "minutes":
				cal.add(Calendar.MINUTE, -number);
				break;
			case "second":
			case "seconds":
				cal.add(Calendar.SECOND, -number);
				break;
			default:
				return null;
			}
		}
		return cal.getTime();
	}

