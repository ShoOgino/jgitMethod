	/** {@inheritDoc} */
	@Override
	protected File discoverGitExe() {
		String path = SystemReader.getInstance().getenv("PATH"); //$NON-NLS-1$
		File gitExe = searchPath(path, "git"); //$NON-NLS-1$

		if (SystemReader.getInstance().isMacOS()) {
			if (gitExe == null
					|| DEFAULT_GIT_LOCATION.equals(gitExe.getPath())) {
				if (searchPath(path, "bash") != null) { //$NON-NLS-1$
					// On MacOSX, PATH is shorter when Eclipse is launched from the
					// Finder than from a terminal. Therefore try to launch bash as a
					// login shell and search using that.
					try {
						String w = readPipe(userHome(),
							new String[]{"bash", "--login", "-c", "which git"}, // //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
							Charset.defaultCharset().name());
						if (!StringUtils.isEmptyOrNull(w)) {
							gitExe = new File(w);
						}
					} catch (CommandFailedException e) {
						LOG.warn(e.getMessage());
					}
				}
			}
			if (gitExe != null
					&& DEFAULT_GIT_LOCATION.equals(gitExe.getPath())) {
				// If we still have the default git exe, it's an XCode wrapper
				// that may prompt the user to install the XCode command line
				// tools if not already present. Avoid the prompt by returning
				// null if no XCode git is there.
				try {
					String w = readPipe(userHome(),
							new String[] { "xcode-select", "-p" }, //$NON-NLS-1$ //$NON-NLS-2$
							Charset.defaultCharset().name());
					if (StringUtils.isEmptyOrNull(w)) {
						gitExe = null;
					} else {
						File realGitExe = new File(new File(w),
								DEFAULT_GIT_LOCATION.substring(1));
						if (!realGitExe.exists()) {
							gitExe = null;
						}
					}
				} catch (CommandFailedException e) {
					gitExe = null;
				}
			}
		}

		return gitExe;
	}

