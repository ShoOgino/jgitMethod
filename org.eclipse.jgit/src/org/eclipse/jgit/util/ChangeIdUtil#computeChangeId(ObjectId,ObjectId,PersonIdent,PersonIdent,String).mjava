	/**
	 * Compute a Change-Id.
	 *
	 * @param treeId
	 *            The id of the tree that would be committed
	 * @param firstParentId
	 *            parent id of previous commit or null
	 * @param author
	 *            the {@link PersonIdent} for the presumed author and time
	 * @param committer
	 *            the {@link PersonIdent} for the presumed committer and time
	 * @param message
	 *            The commit message
	 * @return the change id SHA1 string (without the 'I') or null if the
	 *         message is not complete enough
	 * @throws IOException
	 */
	public static ObjectId computeChangeId(final ObjectId treeId,
			final ObjectId firstParentId, final PersonIdent author,
			final PersonIdent committer, final String message)
			throws IOException {
		String cleanMessage = clean(message);
		if (cleanMessage.length() == 0)
			return null;
		StringBuilder b = new StringBuilder();
		b.append("tree ");
		b.append(ObjectId.toString(treeId));
		b.append("\n");
		if (firstParentId != null) {
			b.append("parent ");
			b.append(ObjectId.toString(firstParentId));
			b.append("\n");
		}
		b.append("author ");
		b.append(author.toExternalString());
		b.append("\n");
		b.append("committer ");
		b.append(committer.toExternalString());
		b.append("\n\n");
		b.append(cleanMessage);
		ObjectWriter w = new ObjectWriter(null);
		byte[] bytes = b.toString().getBytes(Constants.CHARACTER_ENCODING);
		ByteArrayInputStream is = new ByteArrayInputStream(bytes);
		ObjectId sha1 = w.computeObjectSha1(Constants.OBJ_COMMIT, bytes.length,
				is);
		return sha1;
	}

