		private static void saveFileTimeResolution(FileStore s,
				Duration resolution) {
			FileBasedConfig userConfig = SystemReader.getInstance()
					.openUserConfig(null, FS.DETECTED);
			long nanos = resolution.toNanos();
			TimeUnit unit;
			if (nanos < 200_000L) {
				unit = TimeUnit.NANOSECONDS;
			} else if (nanos < 200_000_000L) {
				unit = TimeUnit.MICROSECONDS;
			} else {
				unit = TimeUnit.MILLISECONDS;
			}

			final int max_retries = 5;
			int retries = 0;
			boolean succeeded = false;
			long value = unit.convert(nanos, TimeUnit.NANOSECONDS);
			while (!succeeded && retries < max_retries) {
				try {
					userConfig.load();
					userConfig.setString(
							ConfigConstants.CONFIG_FILESYSTEM_SECTION,
							javaVersionPrefix + s.name(),
							ConfigConstants.CONFIG_KEY_TIMESTAMP_RESOLUTION,
							String.format("%d %s", //$NON-NLS-1$
									Long.valueOf(value),
									unit.name().toLowerCase()));
					userConfig.save();
					succeeded = true;
				} catch (LockFailedException e) {
					// race with another thread, wait a bit and try again
					try {
						retries++;
						Thread.sleep(20);
					} catch (InterruptedException e1) {
						Thread.interrupted();
					}
				} catch (IOException e) {
					LOG.error(MessageFormat.format(
							JGitText.get().cannotSaveConfig,
							userConfig.getFile().getAbsolutePath()), e);
				} catch (ConfigInvalidException e) {
					LOG.error(MessageFormat.format(
							JGitText.get().repositoryConfigFileInvalid,
							userConfig.getFile().getAbsolutePath(),
							e.getMessage()));
				}
			}
		}

