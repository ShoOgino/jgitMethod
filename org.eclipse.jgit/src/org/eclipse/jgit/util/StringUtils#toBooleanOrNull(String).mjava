	/**
	 * Parse a string as a standard Git boolean value.
	 * <p>
	 * The terms {@code yes}, {@code true}, {@code 1}, {@code on} can all be
	 * used to mean {@code true}.
	 * <p>
	 * The terms {@code no}, {@code false}, {@code 0}, {@code off} can all be
	 * used to mean {@code false}.
	 * <p>
	 * Comparisons ignore case, via {@link #equalsIgnoreCase(String, String)}.
	 *
	 * @param stringValue
	 *            the string to parse.
	 * @return the boolean interpretation of {@code value} or null in case the
	 *         string does not represent a boolean value
	 */
	public static Boolean toBooleanOrNull(final String stringValue) {
		if (stringValue == null)
			return null;

		if (equalsIgnoreCase("yes", stringValue)
				|| equalsIgnoreCase("true", stringValue)
				|| equalsIgnoreCase("1", stringValue)
				|| equalsIgnoreCase("on", stringValue))
			return Boolean.TRUE;
		else if (equalsIgnoreCase("no", stringValue)
				|| equalsIgnoreCase("false", stringValue)
				|| equalsIgnoreCase("0", stringValue)
				|| equalsIgnoreCase("off", stringValue))
			return Boolean.FALSE;
		else
			return null;
	}

