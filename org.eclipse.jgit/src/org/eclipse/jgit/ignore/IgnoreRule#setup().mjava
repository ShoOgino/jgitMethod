	/**
	 * Remove leading/trailing characters as needed. Set up
	 * rule variables for later matching.
	 */
	private void setup() {
		int startIndex = 0;
		int endIndex = pattern.length();
		if (pattern.startsWith("!")) {
			startIndex++;
			negation = true;
		}

		if (pattern.endsWith("/")) {
			endIndex --;
			dirOnly = true;
		}
		boolean hasSlash = pattern.contains("/");

		pattern = pattern.substring(startIndex, endIndex);

		if (!hasSlash)
			nameOnly = true;
		else if (!pattern.startsWith("/")) {
			//Contains "/" but does not start with one
			//Adding / to the start should not interfere with matching
			pattern = "/" + pattern;
		}

		if (pattern.contains("*") || pattern.contains("?") || pattern.contains("[")) {
			try {
				matcher = new FileNameMatcher(pattern, Character.valueOf('/'));
			} catch (InvalidPatternException e) {
				e.printStackTrace();
			}
		}
	}

