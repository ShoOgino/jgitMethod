	ObjectId writeObject(final int type, long len, final InputStream is,
			boolean store) throws IOException {
		final File t;
		final DeflaterOutputStream deflateStream;
		final FileOutputStream fileStream;
		ObjectId id = null;

		if (store) {
			t = File.createTempFile("noz", null, r.getObjectsDirectory());
			fileStream = new FileOutputStream(t);
		} else {
			t = null;
			fileStream = null;
		}

		md.reset();
		if (store) {
			def.reset();
			deflateStream = new DeflaterOutputStream(fileStream, def);
		} else
			deflateStream = null;

		try {
			byte[] header;
			int n;

			header = Constants.encodedTypeString(type);
			md.update(header);
			if (deflateStream != null)
				deflateStream.write(header);

			md.update((byte) ' ');
			if (deflateStream != null)
				deflateStream.write((byte) ' ');

			header = Constants.encodeASCII(len);
			md.update(header);
			if (deflateStream != null)
				deflateStream.write(header);

			md.update((byte) 0);
			if (deflateStream != null)
				deflateStream.write((byte) 0);

			while (len > 0
					&& (n = is.read(buf, 0, (int) Math.min(len, buf.length))) > 0) {
				md.update(buf, 0, n);
				if (deflateStream != null)
					deflateStream.write(buf, 0, n);
				len -= n;
			}

			if (len != 0)
				throw new IOException("Input did not match supplied length. "
						+ len + " bytes are missing.");

			if (deflateStream != null ) {
				deflateStream.close();
				if (t != null)
					t.setReadOnly();
			}

			id = ObjectId.fromRaw(md.digest());
		} finally {
			if (id == null && deflateStream != null) {
				try {
					deflateStream.close();
				} finally {
					t.delete();
				}
			}
		}

		if (t == null)
			return id;

		if (r.hasObject(id)) {
			// Object is already in the repository so remove
			// the temporary file.
			//
			t.delete();
		} else {
			final File o = r.toFile(id);
			if (!t.renameTo(o)) {
				// Maybe the directory doesn't exist yet as the object
				// directories are always lazily created. Note that we
				// try the rename first as the directory likely does exist.
				//
				o.getParentFile().mkdir();
				if (!t.renameTo(o)) {
					if (!r.hasObject(id)) {
						// The object failed to be renamed into its proper
						// location and it doesn't exist in the repository
						// either. We really don't know what went wrong, so
						// fail.
						//
						t.delete();
						throw new ObjectWritingException("Unable to"
								+ " create new object: " + o);
					}
				}
			}
		}

		return id;
	}

