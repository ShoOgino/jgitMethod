	/**
	 * Check a commit for errors.
	 *
	 * @param id
	 *            identity of the object being checked.
	 * @param raw
	 *            the commit data. The array is never modified.
	 * @throws CorruptObjectException
	 *             if any error was detected.
	 * @since 4.2
	 */
	public void checkCommit(@Nullable AnyObjectId id, byte[] raw)
			throws CorruptObjectException {
		int ptr = 0;

		if ((ptr = match(raw, ptr, tree)) < 0)
			throw new CorruptObjectException(
					JGitText.get().corruptObjectNotreeHeader);
		if ((ptr = id(raw, ptr)) < 0 || raw[ptr++] != '\n')
			throw new CorruptObjectException(
					JGitText.get().corruptObjectInvalidTree);

		while (match(raw, ptr, parent) >= 0) {
			ptr += parent.length;
			if ((ptr = id(raw, ptr)) < 0 || raw[ptr++] != '\n')
				throw new CorruptObjectException(
						JGitText.get().corruptObjectInvalidParent);
		}

		int p = match(raw, ptr, author);
		if (p > ptr) {
			if ((ptr = personIdent(raw, p, id)) < 0) {
				throw new CorruptObjectException(
						JGitText.get().corruptObjectInvalidAuthor);
			}
		} else if (!skip(id)) {
			throw new CorruptObjectException(
					JGitText.get().corruptObjectNoAuthor);
		}

		p = match(raw, ptr, committer);
		if (p > ptr) {
			if ((ptr = personIdent(raw, p, id)) < 0) {
				throw new CorruptObjectException(
						JGitText.get().corruptObjectInvalidCommitter);
			}
		} else if (!skip(id)) {
			throw new CorruptObjectException(
					JGitText.get().corruptObjectNoCommitter);
		}
	}

