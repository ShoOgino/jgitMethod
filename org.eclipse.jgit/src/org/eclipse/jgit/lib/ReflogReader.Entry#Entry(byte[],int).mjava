		Entry(byte[] raw, int pos) {
			oldId = ObjectId.fromString(raw, pos);
			pos += Constants.OBJECT_ID_STRING_LENGTH;
			if (raw[pos++] != ' ')
				throw new IllegalArgumentException(
						JGitText.get().rawLogMessageDoesNotParseAsLogEntry);
			newId = ObjectId.fromString(raw, pos);
			pos += Constants.OBJECT_ID_STRING_LENGTH;
			if (raw[pos++] != ' ') {
				throw new IllegalArgumentException(
						JGitText.get().rawLogMessageDoesNotParseAsLogEntry);
			}
			who = RawParseUtils.parsePersonIdentOnly(raw, pos);
			int p0 = RawParseUtils.next(raw, pos, '\t'); // personident has no
															// \t
			if (p0 == -1) {
				throw new IllegalArgumentException(
						JGitText.get().rawLogMessageDoesNotParseAsLogEntry);
			}
			int p1 = RawParseUtils.nextLF(raw, p0);
			if (p1 == -1) {
				throw new IllegalArgumentException(
						JGitText.get().rawLogMessageDoesNotParseAsLogEntry);
			}
			comment = RawParseUtils.decode(raw, p0, p1 - 1);
		}

