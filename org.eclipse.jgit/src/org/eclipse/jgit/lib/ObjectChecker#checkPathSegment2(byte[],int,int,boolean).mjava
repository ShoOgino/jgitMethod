	private void checkPathSegment2(byte[] raw, int ptr, int end, boolean skip)
			throws CorruptObjectException {
		if (ptr == end)
			throw new CorruptObjectException(
					JGitText.get().corruptObjectNameZeroLength);
		if (raw[ptr] == '.') {
			switch (end - ptr) {
			case 1:
				throw new CorruptObjectException(
						JGitText.get().corruptObjectNameDot);
			case 2:
				if (raw[ptr + 1] == '.')
					throw new CorruptObjectException(
							JGitText.get().corruptObjectNameDotDot);
				break;
			case 4:
				if (!skip && isGit(raw, ptr + 1))
					throw new CorruptObjectException(String.format(
							JGitText.get().corruptObjectInvalidName,
							RawParseUtils.decode(raw, ptr, end)));
				break;
			default:
				if (!skip && end - ptr > 4
						&& isNormalizedGit(raw, ptr + 1, end))
					throw new CorruptObjectException(String.format(
							JGitText.get().corruptObjectInvalidName,
							RawParseUtils.decode(raw, ptr, end)));
			}
		} else if (!skip && isGitTilde1(raw, ptr, end)) {
			throw new CorruptObjectException(String.format(
					JGitText.get().corruptObjectInvalidName,
					RawParseUtils.decode(raw, ptr, end)));
		}
		if (!skip) {
			if (macosx && isMacHFSGit(raw, ptr, end))
				throw new CorruptObjectException(String.format(
						JGitText.get().corruptObjectInvalidNameIgnorableUnicode,
						RawParseUtils.decode(raw, ptr, end)));

			if (windows) {
				// Windows ignores space and dot at end of file name.
				if (raw[end - 1] == ' ' || raw[end - 1] == '.')
					throw new CorruptObjectException(String.format(
							JGitText.get().corruptObjectInvalidNameEnd,
							Character.valueOf(((char) raw[end - 1]))));
				if (end - ptr >= 3)
					checkNotWindowsDevice(raw, ptr, end);
			}
		}
	}

