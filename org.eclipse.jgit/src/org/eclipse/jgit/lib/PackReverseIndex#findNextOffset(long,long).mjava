	/**
	 * Search for the next offset to the specified offset in this pack (reverse)
	 * index.
	 *
	 * @param offset
	 *            start offset of previous object (must be valid-existing
	 *            offset).
	 * @param maxOffset
	 *            maximum offset in a pack (returned when there is no next
	 *            offset).
	 * @return offset of the next object in a pack or maxOffset if provided
	 *         offset was the last one.
	 * @throws CorruptObjectException
	 *             when there is no object with the provided offset.
	 */
	long findNextOffset(final long offset, final long maxOffset)
			throws CorruptObjectException {
		if (offset <= Integer.MAX_VALUE) {
			final int i32 = Arrays.binarySearch(offsets32, (int) offset);
			if (i32 < 0)
				throw new CorruptObjectException(
						"Can't find object in (reverse) pack index for the specified offset "
								+ offset);

			if (i32 + 1 == offsets32.length) {
				if (offsets64.length > 0)
					return offsets64[0];
				return maxOffset;
			}
			return offsets32[i32 + 1];
		} else {
			final int i64 = Arrays.binarySearch(offsets64, offset);
			if (i64 < 0)
				throw new CorruptObjectException(
						"Can't find object in (reverse) pack index for the specified offset "
								+ offset);

			if (i64 + 1 == offsets64.length)
				return maxOffset;
			return offsets64[i64 + 1];
		}
	}

