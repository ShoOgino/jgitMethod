	private UnpackedObjectLoader(final byte[] compressed, final AnyObjectId id)
			throws CorruptObjectException {
		// Try to determine if this is a legacy format loose object or
		// a new style loose object. The legacy format was completely
		// compressed with zlib so the first byte must be 0x78 (15-bit
		// window size, deflated) and the first 16 bit word must be
		// evenly divisible by 31. Otherwise its a new style loose
		// object.
		//
		final Inflater inflater = InflaterCache.get();
		try {
			final int fb = compressed[0] & 0xff;
			if (fb == 0x78 && (((fb << 8) | compressed[1] & 0xff) % 31) == 0) {
				inflater.setInput(compressed);
				final byte[] hdr = new byte[64];
				int avail = 0;
				while (!inflater.finished() && avail < hdr.length)
					try {
						int uncompressed = inflater.inflate(hdr, avail,
								hdr.length - avail);
						if (uncompressed == 0) {
							throw new CorruptObjectException(id,
									JGitText.get().corruptObjectBadStreamCorruptHeader);
						}
						avail += uncompressed;
					} catch (DataFormatException dfe) {
						final CorruptObjectException coe;
						coe = new CorruptObjectException(id, JGitText.get().corruptObjectBadStream);
						coe.initCause(dfe);
						throw coe;
					}
				if (avail < 5)
					throw new CorruptObjectException(id, JGitText.get().corruptObjectNoHeader);

				final MutableInteger p = new MutableInteger();
				objectType = Constants.decodeTypeString(id, hdr, (byte) ' ', p);
				objectSize = RawParseUtils.parseBase10(hdr, p.value, p);
				if (objectSize < 0)
					throw new CorruptObjectException(id, JGitText.get().corruptObjectNegativeSize);
				if (hdr[p.value++] != 0)
					throw new CorruptObjectException(id, JGitText.get().corruptObjectGarbageAfterSize);
				bytes = new byte[objectSize];
				if (p.value < avail)
					System.arraycopy(hdr, p.value, bytes, 0, avail - p.value);
				decompress(id, inflater, avail - p.value);
			} else {
				int p = 0;
				int c = compressed[p++] & 0xff;
				final int typeCode = (c >> 4) & 7;
				int size = c & 15;
				int shift = 4;
				while ((c & 0x80) != 0) {
					c = compressed[p++] & 0xff;
					size += (c & 0x7f) << shift;
					shift += 7;
				}

				switch (typeCode) {
				case Constants.OBJ_COMMIT:
				case Constants.OBJ_TREE:
				case Constants.OBJ_BLOB:
				case Constants.OBJ_TAG:
					objectType = typeCode;
					break;
				default:
					throw new CorruptObjectException(id, JGitText.get().corruptObjectInvalidType);
				}

				objectSize = size;
				bytes = new byte[objectSize];
				inflater.setInput(compressed, p, compressed.length - p);
				decompress(id, inflater, 0);
			}
		} finally {
			InflaterCache.release(inflater);
		}
	}

