	/**
	 * Create a new cache with a fixed size entry table and lock table.
	 *
	 * @param tSize
	 *            number of entries in the entry hash table.
	 * @param lockCount
	 *            number of entries in the lock table. This is the maximum
	 *            concurrency rate for creation of new objects through
	 *            {@link #load(PackFile, long)} invocations.
	 */
	OffsetCache(final int tSize, final int lockCount) {
		if (tSize < 1)
			throw new IllegalArgumentException("tSize must be >= 1");
		if (lockCount < 1)
			throw new IllegalArgumentException("lockCount must be >= 1");

		queue = new ReferenceQueue<V>();
		tableSize = tSize;
		clock = new AtomicLong(1);
		table = new AtomicReferenceArray<Entry<V>>(tableSize);
		locks = new Lock[lockCount];
		for (int i = 0; i < locks.length; i++)
			locks[i] = new Lock();
		evictLock = new ReentrantLock();

		int eb = (int) (tableSize * .1);
		if (64 < eb)
			eb = 64;
		else if (eb < 4)
			eb = 4;
		if (tableSize < eb)
			eb = tableSize;
		evictBatch = eb;
	}

