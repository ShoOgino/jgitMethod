	/**
	 * Read a file formatted like the git-rebase-todo file. The "done" file is
	 * also formatted like the git-rebase-todo file. These files can be found in
	 * .git/rebase-merge/ or .git/rebase-append/ folders.
	 *
	 * @param path
	 *            path to the file relative to the repository's git-dir. E.g.
	 *            "rebase-merge/git-rebase-todo" or "rebase-append/done"
	 * @param includeComments
	 *            <code>true</code> if also comments should be reported
	 * @return the list of steps
	 * @throws IOException
	 */
	public List<RebaseTodoLine> readRebaseTodo(String path,
			boolean includeComments) throws IOException {
		byte[] buf = IO.readFully(new File(repo.getDirectory(), path));
		int ptr = 0;
		int tokenBegin = 0;
		List<RebaseTodoLine> r = new LinkedList<RebaseTodoLine>();
		while (ptr < buf.length) {
			RebaseTodoLine.Action action = null;
			AbbreviatedObjectId commit = null;
			tokenBegin = ptr;
			ptr = RawParseUtils.nextLF(buf, ptr);
			int lineStart = tokenBegin;
			int lineEnd = ptr - 2;
			if (lineEnd >= 0 && buf[lineEnd] == '\r')
				lineEnd--;
			// Handle comments
			if (buf[tokenBegin] == '#') {
				if (includeComments)
					r.add(new RebaseTodoLine(RawParseUtils.decode(buf,
							tokenBegin, lineEnd + 1)));
				continue;
			}
			// skip leading spaces, tabs, CR
			while (tokenBegin <= lineEnd
					&& (buf[tokenBegin] == ' ' || buf[tokenBegin] == '\t' || buf[tokenBegin] == '\r'))
				tokenBegin++;
			// Handle empty lines (maybe empty after skipping leading
			// whitespace)
			if (tokenBegin > lineEnd) {
				if (includeComments)
					r.add(new RebaseTodoLine(RawParseUtils.decode(buf,
							lineStart, 1 + lineEnd)));
				continue;
			}
			int nextSpace = RawParseUtils.next(buf, tokenBegin, ' ');
			int tokenCount = 0;
			while (tokenCount < 3 && nextSpace < ptr) {
				switch (tokenCount) {
				case 0:
					String actionToken = new String(buf, tokenBegin, nextSpace
							- tokenBegin - 1);
					tokenBegin = nextSpace;
					action = RebaseTodoLine.Action.parse(actionToken);
					break;
				case 1:
					if (action == null)
						break;
					nextSpace = RawParseUtils.next(buf, tokenBegin, ' ');
					String commitToken = new String(buf, tokenBegin, nextSpace
							- tokenBegin - 1);
					tokenBegin = nextSpace;
					commit = AbbreviatedObjectId.fromString(commitToken);
					break;
				case 2:
					if (action == null)
						break;
					r.add(new RebaseTodoLine(action, commit, RawParseUtils
							.decode(buf, tokenBegin, 1 + lineEnd)));
					break;
				}
				tokenCount++;
			}
		}
		return r;
	}

