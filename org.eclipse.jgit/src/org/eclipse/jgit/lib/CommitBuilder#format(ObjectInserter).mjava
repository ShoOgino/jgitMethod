	/**
	 * Format this builder's state as a commit object.
	 *
	 * As a side effect, {@link #getCommitId()} will be populated with the
	 * proper ObjectId for the formatted content.
	 *
	 * @param oi
	 *            the inserter whose formatting support will be reused. The
	 *            inserter itself is not affected, and the commit is not
	 *            actually inserted into the repository.
	 * @return this object in the canonical commit format, suitable for storage
	 *         in a repository.
	 * @throws UnsupportedEncodingException
	 *             the encoding specified by {@link #getEncoding()} is not
	 *             supported by this Java runtime.
	 */
	public byte[] format(ObjectInserter oi) throws UnsupportedEncodingException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		OutputStreamWriter w = new OutputStreamWriter(os, getEncoding());
		try {
			os.write(htree);
			os.write(' ');
			getTreeId().copyTo(os);
			os.write('\n');

			for (ObjectId p : getParentIds()) {
				os.write(hparent);
				os.write(' ');
				p.copyTo(os);
				os.write('\n');
			}

			os.write(hauthor);
			os.write(' ');
			w.write(getAuthor().toExternalString());
			w.flush();
			os.write('\n');

			os.write(hcommitter);
			os.write(' ');
			w.write(getCommitter().toExternalString());
			w.flush();
			os.write('\n');

			if (getEncoding() != Constants.CHARSET) {
				os.write(hencoding);
				os.write(' ');
				os.write(Constants.encodeASCII(getEncoding().name()));
				os.write('\n');
			}

			os.write('\n');

			if (getMessage() != null) {
				w.write(getMessage());
				w.flush();
			}
		} catch (IOException err) {
			// This should never occur, the only way to get it above is
			// for the ByteArrayOutputStream to throw, but it doesn't.
			//
			throw new RuntimeException(err);
		}

		byte[] content = os.toByteArray();
		setCommitId(oi.idFor(Constants.OBJ_COMMIT, content));
		return content;
	}

