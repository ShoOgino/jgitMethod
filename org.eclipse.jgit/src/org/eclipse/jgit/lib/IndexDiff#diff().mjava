	/**
	 * Run the diff operation. Until this is called, all lists will be empty
	 *
	 * @return if anything is different between index, tree, and workdir
	 * @throws IOException
	 */
	public boolean diff() throws IOException {
		boolean changesExist = false;
		DirCache dirCache = repository.readDirCache();
		TreeWalk treeWalk = new TreeWalk(repository);
		treeWalk.reset();
		treeWalk.setRecursive(true);
		// add the trees (tree, dirchache, workdir)
		if (tree != null)
			treeWalk.addTree(tree);
		else
			treeWalk.addTree(new EmptyTreeIterator());
		treeWalk.addTree(new DirCacheIterator(dirCache));
		treeWalk.addTree(initialWorkingTreeIterator);
		Collection<TreeFilter> filters = new ArrayList<TreeFilter>(
				filter == null ? 3 : 4);
		if (filter != null)
			filters.add(filter);
		filters.add(new NotIgnoredFilter(WORKDIR));
		filters.add(new SkipWorkTreeFilter(INDEX));
		filters.add(TreeFilter.ANY_DIFF);
		treeWalk.setFilter(AndTreeFilter.create(filters));
		while (treeWalk.next()) {
			AbstractTreeIterator treeIterator = treeWalk.getTree(TREE,
					AbstractTreeIterator.class);
			DirCacheIterator dirCacheIterator = treeWalk.getTree(INDEX,
					DirCacheIterator.class);
			WorkingTreeIterator workingTreeIterator = treeWalk.getTree(WORKDIR,
					WorkingTreeIterator.class);
			FileMode fileModeTree = treeWalk.getFileMode(TREE);

			if (treeIterator != null) {
				if (dirCacheIterator != null) {
					if (!treeIterator.getEntryObjectId().equals(
							dirCacheIterator.getEntryObjectId())) {
						// in repo, in index, content diff => changed
						changed.add(dirCacheIterator.getEntryPathString());
						changesExist = true;
					}
				} else {
					// in repo, not in index => removed
					if (!fileModeTree.equals(FileMode.TYPE_TREE)) {
						removed.add(treeIterator.getEntryPathString());
						changesExist = true;
						if (workingTreeIterator != null)
							untracked.add(workingTreeIterator
									.getEntryPathString());
					}
				}
			} else {
				if (dirCacheIterator != null) {
					// not in repo, in index => added
					added.add(dirCacheIterator.getEntryPathString());
					changesExist = true;
				} else {
					// not in repo, not in index => untracked
					if (workingTreeIterator != null
							&& !workingTreeIterator.isEntryIgnored()) {
						untracked.add(workingTreeIterator.getEntryPathString());
						changesExist = true;
					}
				}
			}

			if (dirCacheIterator != null) {
				if (workingTreeIterator == null) {
					// in index, not in workdir => missing
					missing.add(dirCacheIterator.getEntryPathString());
					changesExist = true;
				} else {
					if (!dirCacheIterator.idEqual(workingTreeIterator)) {
						// in index, in workdir, content differs => modified
						modified.add(dirCacheIterator.getEntryPathString());
						changesExist = true;
					}
				}
			}
		}
		return changesExist;
	}

