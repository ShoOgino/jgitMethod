	/**
	 * Use pubring.kbx when available, if not fallback to secring.gpg or secret
	 * key path provided to parse and return secret key
	 *
	 * @return the secret key
	 * @throws IOException
	 *             in case of issues reading key files
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchProviderException
	 * @throws PGPException
	 *             in case of issues finding a key
	 * @throws CanceledException
	 * @throws URISyntaxException
	 * @throws UnsupportedCredentialItem
	 */
	public BouncyCastleGpgKey findSecretKey() throws IOException,
			NoSuchAlgorithmException, NoSuchProviderException, PGPException,
			CanceledException, UnsupportedCredentialItem, URISyntaxException {
		BouncyCastleGpgKey key;
		if (exists(USER_KEYBOX_PATH)) {
			try {
				key = loadKeyFromKeybox(USER_KEYBOX_PATH);
				if (key != null) {
					return key;
				}
				throw new PGPException(MessageFormat.format(
						JGitText.get().gpgNoPublicKeyFound, signingKey));
			} catch (NoOpenPgpKeyException e) {
				// Ignore and try the secring.gpg, if it exists.
				if (log.isDebugEnabled()) {
					log.debug("{} does not contain any OpenPGP keys", //$NON-NLS-1$
							USER_KEYBOX_PATH);
				}
			}
		}
		if (exists(USER_PGP_LEGACY_SECRING_FILE)) {
			key = loadKeyFromSecring(USER_PGP_LEGACY_SECRING_FILE);
			if (key != null) {
				return key;
			}
			throw new PGPException(MessageFormat.format(
					JGitText.get().gpgNoKeyInLegacySecring, signingKey));
		}
		throw new PGPException(JGitText.get().gpgNoKeyring);
	}

