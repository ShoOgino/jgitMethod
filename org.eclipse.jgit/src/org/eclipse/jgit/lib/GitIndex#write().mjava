	/**
	 * Write content of index to disk.
	 *
	 * @throws IOException
	 */
	public void write() throws IOException {
		checkWriteOk();
		File tmpIndex = new File(cacheFile.getAbsoluteFile() + ".tmp");
		File lock = new File(cacheFile.getAbsoluteFile() + ".lock");
		if (!lock.createNewFile())
			throw new IOException(JGitText.get().indexFileIsInUse);
		try {
			FileOutputStream fileOutputStream = new FileOutputStream(tmpIndex);
			FileChannel fc = fileOutputStream.getChannel();
			ByteBuffer buf = ByteBuffer.allocate(4096);
			MessageDigest newMessageDigest = Constants.newMessageDigest();
			header = new Header(entries);
			header.write(buf);
			buf.flip();
			newMessageDigest
					.update(buf.array(), buf.arrayOffset(), buf.limit());
			fc.write(buf);
			buf.flip();
			buf.clear();
			for (Iterator i = entries.values().iterator(); i.hasNext();) {
				Entry e = (Entry) i.next();
				e.write(buf);
				buf.flip();
				newMessageDigest.update(buf.array(), buf.arrayOffset(), buf
						.limit());
				fc.write(buf);
				buf.flip();
				buf.clear();
			}
			buf.put(newMessageDigest.digest());
			buf.flip();
			fc.write(buf);
			fc.close();
			fileOutputStream.close();
			if (cacheFile.exists())
				if (!cacheFile.delete())
					throw new IOException(
						JGitText.get().couldNotRenameDeleteOldIndex);
			if (!tmpIndex.renameTo(cacheFile))
				throw new IOException(
						JGitText.get().couldNotRenameTemporaryIndexFileToIndex);
			changed = false;
			statDirty = false;
			lastCacheTime = cacheFile.lastModified();
			db.fireEvent(new IndexChangedEvent());
		} finally {
			if (!lock.delete())
				throw new IOException(
						JGitText.get().couldNotDeleteLockFileShouldNotHappen);
			if (tmpIndex.exists() && !tmpIndex.delete())
				throw new IOException(
						JGitText.get().couldNotDeleteTemporaryIndexFileShouldNotHappen);
		}
	}

