	public InternalFetchConnection(PackTransport transport,
			final UploadPackFactory<C> uploadPackFactory,
			final C req, final Repository remote) throws TransportException {
		super(transport);

		final PipedInputStream in_r;
		final PipedOutputStream in_w;

		final PipedInputStream out_r;
		final PipedOutputStream out_w;
		try {
			in_r = new PipedInputStream();
			in_w = new PipedOutputStream(in_r);

			out_r = new PipedInputStream() {
				// The client (BasePackFetchConnection) can write
				// a huge burst before it reads again. We need to
				// force the buffer to be big enough, otherwise it
				// will deadlock both threads.
				{
					buffer = new byte[MIN_CLIENT_BUFFER];
				}
			};
			out_w = new PipedOutputStream(out_r);
		} catch (IOException err) {
			remote.close();
			throw new TransportException(uri, JGitText.get().cannotConnectPipes, err);
		}

		worker = new Thread("JGit-Upload-Pack") { //$NON-NLS-1$
			@Override
			public void run() {
				try {
					final UploadPack rp = uploadPackFactory.create(req, remote);
					rp.upload(out_r, in_w, null);
				} catch (ServiceNotEnabledException e) {
					// Ignored. Client cannot use this repository.
				} catch (ServiceNotAuthorizedException e) {
					// Ignored. Client cannot use this repository.
				} catch (IOException err) {
					// Client side of the pipes should report the problem.
					err.printStackTrace();
				} catch (RuntimeException err) {
					// Client side will notice we went away, and report.
					err.printStackTrace();
				} finally {
					try {
						out_r.close();
					} catch (IOException e2) {
						// Ignore close failure, we probably crashed above.
					}

					try {
						in_w.close();
					} catch (IOException e2) {
						// Ignore close failure, we probably crashed above.
					}

					remote.close();
				}
			}
		};
		worker.start();

		init(in_r, out_w);
		readAdvertisedRefs();
	}

