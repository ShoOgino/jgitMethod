	private void service() throws IOException {
		if (biDirectionalPipe) {
			sendAdvertisedRefs(new PacketLineOutRefAdvertiser(pckOut));
			pckOut.flush();
		} else
			getAdvertisedOrDefaultRefs();
		if (hasError())
			return;
		recvCommands();
		if (hasCommands()) {
			enableCapabilities();

			Throwable unpackError = null;
			if (needPack()) {
				try {
					receivePackAndCheckConnectivity();
				} catch (IOException err) {
					unpackError = err;
				} catch (RuntimeException err) {
					unpackError = err;
				} catch (Error err) {
					unpackError = err;
				}
			}

			if (unpackError == null) {
				validateCommands();
				preReceive.onPreReceive(this, filterCommands(Result.NOT_ATTEMPTED));
				executeCommands();
			}
			unlockPack();

			if (reportStatus) {
				sendStatusReport(true, unpackError, new Reporter() {
					void sendString(final String s) throws IOException {
						pckOut.writeString(s + "\n");
					}
				});
				pckOut.end();
			} else if (msgOut != null) {
				sendStatusReport(false, unpackError, new Reporter() {
					void sendString(final String s) throws IOException {
						msgOut.write(Constants.encode(s + "\n"));
					}
				});
			}

			postReceive.onPostReceive(this, filterCommands(Result.OK));

			if (unpackError != null)
				throw new UnpackException(unpackError);
		}
	}

