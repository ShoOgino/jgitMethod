	private void checkConnectivity() throws IOException {
		ObjectIdSubclassMap<ObjectId> baseObjects = null;
		ObjectIdSubclassMap<ObjectId> providedObjects = null;

		if (ensureObjectsProvidedVisible) {
			baseObjects = ip.getBaseObjectIds();
			providedObjects = ip.getNewObjectIds();
		}
		ip = null;

		final ObjectWalk ow = new ObjectWalk(db);
		for (final ReceiveCommand cmd : commands) {
			if (cmd.getResult() != Result.NOT_ATTEMPTED)
				continue;
			if (cmd.getType() == ReceiveCommand.Type.DELETE)
				continue;
			ow.markStart(ow.parseAny(cmd.getNewId()));
		}
		for (final Ref ref : refs.values()) {
			RevObject o = ow.parseAny(ref.getObjectId());
			ow.markUninteresting(o);

			if (ensureObjectsProvidedVisible && !baseObjects.isEmpty()) {
				while (o instanceof RevTag)
					o = ((RevTag) o).getObject();
				if (o instanceof RevCommit)
					o = ((RevCommit) o).getTree();
				if (o instanceof RevTree)
					ow.markUninteresting(o);
			}
		}

		if (ensureObjectsProvidedVisible) {
			for (ObjectId id : baseObjects) {
				   RevObject b = ow.lookupAny(id, Constants.OBJ_BLOB);
				   if (!b.has(RevFlag.UNINTERESTING))
				     throw new MissingObjectException(b, b.getType());
			}
		}

		RevCommit c;
		while ((c = ow.next()) != null) {
			if (ensureObjectsProvidedVisible && !providedObjects.contains(c))
				throw new MissingObjectException(c, Constants.TYPE_COMMIT);
		}

		RevObject o;
		while ((o = ow.nextObject()) != null) {
			if (o instanceof RevBlob && !db.hasObject(o))
				throw new MissingObjectException(o, Constants.TYPE_BLOB);

			if (ensureObjectsProvidedVisible && !providedObjects.contains(o))
				throw new MissingObjectException(o, o.getType());
		}
	}

