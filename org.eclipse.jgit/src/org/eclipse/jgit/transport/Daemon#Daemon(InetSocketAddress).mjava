	/**
	 * Configure a new daemon for the specified network address.
	 *
	 * @param addr
	 *            address to listen for connections on. If null, any available
	 *            port will be chosen on all network interfaces.
	 */
	public Daemon(final InetSocketAddress addr) {
		myAddress = addr;
		exports = new ConcurrentHashMap<String, Repository>();
		exportBase = new CopyOnWriteArrayList<File>();
		processors = new ThreadGroup("Git-Daemon");

		services = new DaemonService[] {
				new DaemonService("upload-pack", "uploadpack") {
					{
						setEnabled(true);
					}

					@Override
					protected void execute(final DaemonClient dc,
							final Repository db) throws IOException {
						final UploadPack rp = new UploadPack(db);
						final InputStream in = dc.getInputStream();
						rp.setTimeout(Daemon.this.getTimeout());
						rp.upload(in, dc.getOutputStream(), null);
					}
				}, new DaemonService("receive-pack", "receivepack") {
					{
						setEnabled(false);
					}

					@Override
					protected void execute(final DaemonClient dc,
							final Repository db) throws IOException {
						final InetAddress peer = dc.getRemoteAddress();
						String host = peer.getCanonicalHostName();
						if (host == null)
							host = peer.getHostAddress();
						final ReceivePack rp = new ReceivePack(db);
						final InputStream in = dc.getInputStream();
						final String name = "anonymous";
						final String email = name + "@" + host;
						rp.setRefLogIdent(new PersonIdent(name, email));
						rp.setTimeout(Daemon.this.getTimeout());
						rp.receive(in, dc.getOutputStream(), null);
					}
				} };
	}

