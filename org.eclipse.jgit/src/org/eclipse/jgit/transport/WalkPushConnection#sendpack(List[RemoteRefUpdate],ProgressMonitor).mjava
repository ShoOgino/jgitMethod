	private void sendpack(final List<RemoteRefUpdate> updates,
			final ProgressMonitor monitor) throws TransportException {
		String pathPack = null;
		String pathIdx = null;

		try (final PackWriter writer = new PackWriter(transport.getPackConfig(),
				local.newObjectReader())) {

			final Set<ObjectId> need = new HashSet<ObjectId>();
			final Set<ObjectId> have = new HashSet<ObjectId>();
			for (final RemoteRefUpdate r : updates)
				need.add(r.getNewObjectId());
			for (final Ref r : getRefs()) {
				have.add(r.getObjectId());
				if (r.getPeeledObjectId() != null)
					have.add(r.getPeeledObjectId());
			}
			writer.preparePack(monitor, need, have);

			// We don't have to continue further if the pack will
			// be an empty pack, as the remote has all objects it
			// needs to complete this change.
			//
			if (writer.getObjectCount() == 0)
				return;

			packNames = new LinkedHashMap<String, String>();
			for (final String n : dest.getPackNames())
				packNames.put(n, n);

			final String base = "pack-" + writer.computeName().name(); //$NON-NLS-1$
			final String packName = base + ".pack"; //$NON-NLS-1$
			pathPack = "pack/" + packName; //$NON-NLS-1$
			pathIdx = "pack/" + base + ".idx"; //$NON-NLS-1$ //$NON-NLS-2$

			if (packNames.remove(packName) != null) {
				// The remote already contains this pack. We should
				// remove the index before overwriting to prevent bad
				// offsets from appearing to clients.
				//
				dest.writeInfoPacks(packNames.keySet());
				dest.deleteFile(pathIdx);
			}

			// Write the pack file, then the index, as readers look the
			// other direction (index, then pack file).
			//
			final String wt = "Put " + base.substring(0, 12); //$NON-NLS-1$
			OutputStream os = dest.writeFile(pathPack, monitor, wt + "..pack"); //$NON-NLS-1$
			try {
				os = new SafeBufferedOutputStream(os);
				writer.writePack(monitor, monitor, os);
			} finally {
				os.close();
			}

			os = dest.writeFile(pathIdx, monitor, wt + "..idx"); //$NON-NLS-1$
			try {
				os = new SafeBufferedOutputStream(os);
				writer.writeIndex(os);
			} finally {
				os.close();
			}

			// Record the pack at the start of the pack info list. This
			// way clients are likely to consult the newest pack first,
			// and discover the most recent objects there.
			//
			final ArrayList<String> infoPacks = new ArrayList<String>();
			infoPacks.add(packName);
			infoPacks.addAll(packNames.keySet());
			dest.writeInfoPacks(infoPacks);

		} catch (IOException err) {
			safeDelete(pathIdx);
			safeDelete(pathPack);

			throw new TransportException(uri, JGitText.get().cannotStoreObjects, err);
		}
	}

