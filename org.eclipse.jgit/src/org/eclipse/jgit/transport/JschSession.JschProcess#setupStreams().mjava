		private void setupStreams() throws IOException {
			inputStream = channel.getInputStream();

			// JSch won't let us interrupt writes when we use our InterruptTimer
			// to break out of a long-running write operation. To work around
			// that we spawn a background thread to shuttle data through a pipe,
			// as we can issue an interrupted write out of that. Its slower, so
			// we only use this route if there is a timeout.
			final OutputStream out = channel.getOutputStream();
			if (timeout <= 0) {
				outputStream = out;
			} else {
				final PipedInputStream pipeIn = new PipedInputStream();
				final StreamCopyThread copier = new StreamCopyThread(pipeIn,
						out);
				final PipedOutputStream pipeOut = new PipedOutputStream(pipeIn) {
					@Override
					public void flush() throws IOException {
						super.flush();
						copier.flush();
					}

					@Override
					public void close() throws IOException {
						super.close();
						try {
							copier.join(timeout * 1000);
						} catch (InterruptedException e) {
							// Just wake early, the thread will terminate
							// anyway.
						}
					}
				};
				copier.start();
				outputStream = pipeOut;
			}

			errStream = channel.getErrStream();
		}

