	private boolean sendWants(Collection<Ref> want) throws IOException {
		final PacketLineOut p = statelessRPC ? pckState : pckOut;
		boolean first = true;
		for (final Ref r : want) {
			ObjectId objectId = r.getObjectId();
			if (objectId == null) {
				continue;
			}
			try {
				if (walk.parseAny(objectId).has(REACHABLE)) {
					// We already have this object. Asking for it is
					// not a very good idea.
					//
					continue;
				}
			} catch (IOException err) {
				// Its OK, we don't have it, but we want to fix that
				// by fetching the object from the other side.
			}

			final StringBuilder line = new StringBuilder(46);
			line.append("want "); //$NON-NLS-1$
			line.append(objectId.name());
			if (first) {
				line.append(enableCapabilities());
				first = false;
			}
			line.append('\n');
			p.writeString(line.toString());
			if (minimalNegotiationSet != null) {
				Ref current = local.exactRef(r.getName());
				if (current != null) {
					ObjectId o = current.getObjectId();
					if (o != null && !o.equals(ObjectId.zeroId())) {
						minimalNegotiationSet.add(o);
					}
				}
			}
		}
		if (first) {
			return false;
		}
		if (filterBlobLimit == 0) {
			p.writeString(OPTION_FILTER + " blob:none"); //$NON-NLS-1$
		} else if (filterBlobLimit > 0) {
			p.writeString(OPTION_FILTER + " blob:limit=" + filterBlobLimit); //$NON-NLS-1$
		}
		p.end();
		outNeedsEnd = false;
		return true;
	}

