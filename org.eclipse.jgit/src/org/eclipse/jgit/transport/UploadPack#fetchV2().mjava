	private void fetchV2() throws IOException {
		options = new HashSet<>();

		// Packs are always sent multiplexed and using full 64K
		// lengths.
		options.add(OPTION_SIDE_BAND_64K);

		// Depending on the requestValidator, #processHaveLines may
		// require that advertised be set. Set it only in the required
		// circumstances (to avoid a full ref lookup in the case that
		// we don't need it).
		if (requestValidator instanceof TipRequestValidator ||
				requestValidator instanceof ReachableCommitTipRequestValidator ||
				requestValidator instanceof AnyRequestValidator) {
			advertised = Collections.emptySet();
		} else {
			advertised = refIdSet(getAdvertisedOrDefaultRefs().values());
		}

		String line;
		List<ObjectId> peerHas = new ArrayList<>();
		boolean doneReceived = false;

		// Currently, we do not support any capabilities, so the next
		// line is DELIM.
		if ((line = pckIn.readString()) != PacketLineIn.DELIM) {
			throw new PackProtocolException("unexpected " + line);
		}

		while ((line = pckIn.readString()) != PacketLineIn.END) {
			if (line.startsWith("want ")) {
				wantIds.add(ObjectId.fromString(line.substring(5)));
			} else if (line.startsWith("have ")) {
				peerHas.add(ObjectId.fromString(line.substring(5)));
			} else if (line.equals("done")) {
				doneReceived = true;
			} else if (line.equals(OPTION_THIN_PACK)) {
				options.add(OPTION_THIN_PACK);
			}
			// else ignore it
		}
		rawOut.stopBuffering();

		boolean sectionSent = false;
		if (doneReceived) {
			processHaveLines(peerHas, ObjectId.zeroId(), new PacketLineOut(NullOutputStream.INSTANCE));
		} else {
			pckOut.writeString("acknowledgments\n");
			for (ObjectId id : peerHas) {
				if (walk.getObjectReader().has(id)) {
					pckOut.writeString("ACK " + id.getName() + "\n");
				}
			}
			processHaveLines(peerHas, ObjectId.zeroId(), new PacketLineOut(NullOutputStream.INSTANCE));
			if (okToGiveUp()) {
				pckOut.writeString("ready\n");
			} else if (commonBase.isEmpty()) {
				pckOut.writeString("NAK\n");
			}
			sectionSent = true;
		}
		if (doneReceived || okToGiveUp()) {
			if (sectionSent)
				pckOut.writeDelim();
			pckOut.writeString("packfile\n");
			sendPack(new PackStatistics.Accumulator());
		}
		pckOut.end();
	}

