	/*
	 * Assume we are document "a/b/index.html", what should we put in a href to get to "a/" ?
	 * Returns the child if either base or child is not a bare path. This provides a missing feature in
	 * java.net.URI (see http://bugs.java.com/view_bug.do?bug_id=6226081).
	 */
	static URI relativize(URI current, URI target) {
		// We only handle bare paths for now.
		if (!target.toString().equals(target.getPath())) {
			return target;
		}
		if (!current.toString().equals(current.getPath())) {
			return target;
		}

		String cur = current.normalize().getPath();
		String dest = target.normalize().getPath();

		// TODO(hanwen): maybe (absolute, relative) should throw an exception.
		if (cur.startsWith("/") != dest.startsWith("/")) { //$NON-NLS-1$//$NON-NLS-2$
			return target;
		}

		while (cur.startsWith("/")) { //$NON-NLS-1$
			cur = cur.substring(1);
		}
		while (dest.startsWith("/")) { //$NON-NLS-1$
			dest = dest.substring(1);
		}

		if (!cur.endsWith("/")) { //$NON-NLS-1$
			// The current file doesn't matter.
			cur = cur.substring(0, cur.lastIndexOf('/'));
		}
		String destFile = ""; //$NON-NLS-1$
		if (!dest.endsWith("/")) { //$NON-NLS-1$
			// We always have to provide the destination file.
			destFile = dest.substring(dest.lastIndexOf('/') + 1, dest.length());
			dest = dest.substring(0, dest.lastIndexOf('/'));
		}

		String[] cs = cur.split("/"); //$NON-NLS-1$
		String[] ds = dest.split("/"); //$NON-NLS-1$

		int common = 0;
		while (common < cs.length && common < ds.length && cs[common].equals(ds[common])) {
			common++;
		}

		StringJoiner j = new StringJoiner("/"); //$NON-NLS-1$
		for (int i = common; i < cs.length; i++) {
			j.add(".."); //$NON-NLS-1$
		}
		for (int i = common; i < ds.length; i++) {
			j.add(ds[i]);
		}

		j.add(destFile);
		return URI.create(j.toString());
	}

