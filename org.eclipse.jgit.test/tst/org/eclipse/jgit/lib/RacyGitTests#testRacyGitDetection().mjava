	public void testRacyGitDetection() throws IOException,
			IllegalStateException, InterruptedException {
		TreeSet<Long> modTimes = new TreeSet<Long>();
		File lastFile;

		// wait to ensure that modtimes of the file doesn't match last index
		// file modtime
		modTimes.add(fsTick(db.getIndexFile()));

		// create two files
		addToWorkDir("a", "a");
		lastFile = addToWorkDir("b", "b");

		// wait to ensure that file-modTimes and therefore index entry modTime
		// doesn't match the modtime of index-file after next persistance
		modTimes.add(fsTick(lastFile));

		// now add both files to the index. No racy git expected
		addToIndex(modTimes);

		assertEquals(
				"[a, mode:100644, time:t0, length:1, sha1:2e65efe2a145dda7ee51d1741299f848e5bf752e]" +
				"[b, mode:100644, time:t0, length:1, sha1:63d8dbd40c23542e740659a7168a0ce3138ea748]",
				indexState(SMUDGE | MOD_TIME | LENGTH | CONTENT_ID));

		// Remember the last modTime of index file. All modifications times of
		// further modification are translated to this value so it looks that
		// files have been modified in the same time slot as the index file
		modTimes.add(Long.valueOf(db.getIndexFile().lastModified()));

		// modify one file
		addToWorkDir("a", "a2");
		// now update the index the index. 'a' has to be racily clean -- because
		// it's modification time is exactly the same as the previous index file
		// mod time.
		addToIndex(modTimes);

		db.readDirCache();
		// although racily clean a should not be reported as being dirty
		assertEquals(
				"[a, mode:100644, time:t1, smudged, length:0]" +
				"[b, mode:100644, time:t0, length:1]",
				indexState(SMUDGE|MOD_TIME|LENGTH));
	}

