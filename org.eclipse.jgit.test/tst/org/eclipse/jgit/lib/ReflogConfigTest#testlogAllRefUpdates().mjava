	public void testlogAllRefUpdates() throws Exception {
		long commitTime = 1154236443000L;
		int tz = -4 * 60;

		// check that there are no entries in the reflog and turn off writing
		// reflogs
		assertTrue("there should be no entries in reflog", db.getReflogReader(
				Constants.HEAD).getReverseEntries().size() == 0);
		db.getConfig().setBoolean("core", null, "logallrefupdates", false);

		// do one commit and check that reflog size is 0: no reflogs should be
		// written
		final Tree t = new Tree(db);
		addFileToTree(t, "i-am-a-file", "and this is the data in me\n");
		commit(t, "A Commit\n", new PersonIdent(jauthor, commitTime, tz),
				new PersonIdent(jcommitter, commitTime, tz));
		commitTime += 100;
		assertTrue(
				"Reflog for HEAD still contain no entry",
				db.getReflogReader(Constants.HEAD).getReverseEntries().size() == 0);

		// set the logAllRefUpdates parameter to true and check it
		db.getConfig().setBoolean("core", null, "logallrefupdates", true);
		assertTrue(db.getConfig().getCore().isLogAllRefUpdates());

		// do one commit and check that reflog size is increased to 1
		addFileToTree(t, "i-am-another-file", "and this is other data in me\n");
		commit(t, "A Commit\n", new PersonIdent(jauthor, commitTime, tz),
				new PersonIdent(jcommitter, commitTime, tz));
		commitTime += 100;
		assertTrue(
				"Reflog for HEAD should contain one entry",
				db.getReflogReader(Constants.HEAD).getReverseEntries().size() == 1);

		// set the logAllRefUpdates parameter to false and check it
		db.getConfig().setBoolean("core", null, "logallrefupdates", false);
		assertFalse(db.getConfig().getCore().isLogAllRefUpdates());

		// do one commit and check that reflog size is 2
		addFileToTree(t, "i-am-anotheranother-file",
				"and this is other other data in me\n");
		commit(t, "A Commit\n", new PersonIdent(jauthor, commitTime, tz),
				new PersonIdent(jcommitter, commitTime, tz));
		assertTrue(
				"Reflog for HEAD should contain two entries",
				db.getReflogReader(Constants.HEAD).getReverseEntries().size() == 2);
	}

