	@Test
	public void testReadWriteMergeHeads() throws IOException {
		assertEquals(db.readMergeHeads(), null);
		db.writeMergeHeads(Arrays.asList(ObjectId.zeroId(),
				ObjectId.fromString(sampleId)));
		assertEquals(read(new File(db.getDirectory(), "MERGE_HEAD")), "0000000000000000000000000000000000000000\n1c6db447abdbb291b25f07be38ea0b1bf94947c5\n");
		assertEquals(db.readMergeHeads().size(), 2);
		assertEquals(db.readMergeHeads().get(0), ObjectId.zeroId());
		assertEquals(db.readMergeHeads().get(1), ObjectId.fromString(sampleId));
		// same test again, this time with lower-level io
		FileOutputStream fos = new FileOutputStream(new File(db.getDirectory(),
		"MERGE_HEAD"));
		try {
			fos.write("0000000000000000000000000000000000000000\n1c6db447abdbb291b25f07be38ea0b1bf94947c5\n".getBytes(Constants.CHARACTER_ENCODING));
		} finally {
			fos.close();
		}
		assertEquals(db.readMergeHeads().size(), 2);
		assertEquals(db.readMergeHeads().get(0), ObjectId.zeroId());
		assertEquals(db.readMergeHeads().get(1), ObjectId.fromString(sampleId));
		db.writeMergeHeads(Collections.EMPTY_LIST);
		assertEquals(read(new File(db.getDirectory(), "MERGE_HEAD")), "");
		assertEquals(db.readMergeHeads(), null);
		fos = new FileOutputStream(new File(db.getDirectory(),
				"MERGE_HEAD"));
		try {
			fos.write(sampleId.getBytes(Constants.CHARACTER_ENCODING));
		} finally {
			fos.close();
		}
		assertEquals(db.readMergeHeads().size(), 1);
		assertEquals(db.readMergeHeads().get(0), ObjectId.fromString(sampleId));
	}

