	public void testFindingConflicts() throws IOException {
		GitIndex index = new GitIndex(db);
		index.add(trash, writeTrashFile("bar", "bar"));
		index.add(trash, writeTrashFile("foo/bar/baz/qux", "foo/bar"));
		recursiveDelete(new File(trash, "bar"));
		recursiveDelete(new File(trash, "foo"));
		writeTrashFile("bar/baz/qux/foo", "another nasty one");
		writeTrashFile("foo", "troublesome little bugger");

		WorkDirCheckout workDirCheckout = new WorkDirCheckout(db, trash, index,
				index);
		workDirCheckout.prescanOneTree();
		ArrayList<String> conflictingEntries = workDirCheckout
				.getConflicts();
		ArrayList<String> removedEntries = workDirCheckout.getRemoved();
		assertEquals("bar/baz/qux/foo", conflictingEntries.get(0));
		assertEquals("foo", conflictingEntries.get(1));

		GitIndex index2 = new GitIndex(db);
		recursiveDelete(new File(trash, "bar"));
		recursiveDelete(new File(trash, "foo"));

		index2.add(trash, writeTrashFile("bar/baz/qux/foo", "bar"));
		index2.add(trash, writeTrashFile("foo", "lalala"));

		workDirCheckout = new WorkDirCheckout(db, trash, index2, index);
		workDirCheckout.prescanOneTree();

		conflictingEntries = workDirCheckout.getConflicts();
		removedEntries = workDirCheckout.getRemoved();
		assertTrue(conflictingEntries.isEmpty());
		assertTrue(removedEntries.contains("bar/baz/qux/foo"));
		assertTrue(removedEntries.contains("foo"));
	}

