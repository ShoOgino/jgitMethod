	@Test
	public void testReadTodoFile() throws Exception {
		String[] expected = { "reword " + ObjectId.zeroId().name() + " Foo",
				"# A comment in the todo list",
				"pick " + ObjectId.zeroId().name() + " Foo fie",
				"squash " + ObjectId.zeroId().name() + " F",
				"fixup " + ObjectId.zeroId().name(),
				"edit " + ObjectId.zeroId().name() + " f",
				"edit " + ObjectId.zeroId().name() + ' ' };
		createTodoList(expected);
		RebaseTodoFile todo = new RebaseTodoFile(db);
		List<RebaseTodoLine> lines = todo.readRebaseTodo(TEST_TODO, true);
		assertEquals("Expected 7 lines", 7, lines.size());
		int i = 0;
		for (RebaseTodoLine line : lines) {
			switch (i) {
			case 0:
				assertEquals("Expected REWORD", RebaseTodoLine.Action.REWORD,
						line.getAction());
				assertEquals("Unexpected ID", ObjectId.zeroId().abbreviate(40),
						line.getCommit());
				assertEquals("Unexpected Message", "Foo",
						line.getShortMessage());
				break;
			case 1:
				assertEquals("Expected COMMENT", RebaseTodoLine.Action.COMMENT,
						line.getAction());
				assertEquals("Unexpected Message",
						"# A comment in the todo list",
						line.getComment());
				break;
			case 2:
				assertEquals("Expected PICK", RebaseTodoLine.Action.PICK,
						line.getAction());
				assertEquals("Unexpected ID", ObjectId.zeroId().abbreviate(40),
						line.getCommit());
				assertEquals("Unexpected Message", "Foo fie",
						line.getShortMessage());
				break;
			case 3:
				assertEquals("Expected SQUASH", RebaseTodoLine.Action.SQUASH,
						line.getAction());
				assertEquals("Unexpected ID", ObjectId.zeroId().abbreviate(40),
						line.getCommit());
				assertEquals("Unexpected Message", "F", line.getShortMessage());
				break;
			case 4:
				assertEquals("Expected FIXUP", RebaseTodoLine.Action.FIXUP,
						line.getAction());
				assertEquals("Unexpected ID", ObjectId.zeroId().abbreviate(40),
						line.getCommit());
				assertEquals("Unexpected Message", "", line.getShortMessage());
				break;
			case 5:
				assertEquals("Expected EDIT", RebaseTodoLine.Action.EDIT,
						line.getAction());
				assertEquals("Unexpected ID", ObjectId.zeroId().abbreviate(40),
						line.getCommit());
				assertEquals("Unexpected Message", "f", line.getShortMessage());
				break;
			case 6:
				assertEquals("Expected EDIT", RebaseTodoLine.Action.EDIT,
						line.getAction());
				assertEquals("Unexpected ID", ObjectId.zeroId().abbreviate(40),
						line.getCommit());
				assertEquals("Unexpected Message", "", line.getShortMessage());
				break;
			default:
				fail("Too many lines");
				return;
			}
			i++;
		}
	}

