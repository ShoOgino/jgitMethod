	public void testRules() {
		ignoreTestDir = JGitTestUtil.getTestResourceFile("excludeTest");
		assertTrue("Test resource directory is not a directory", ignoreTestDir.isDirectory());
		createExcludeFile();
		initCache();

		File test = new File(db.getDirectory().getParentFile(), "test.stp");
		String path = test.getAbsolutePath();
		assertTrue("Could not find test file " + path, test.exists());

		IgnoreNode baseRules = cache.getRules("");
		assertNotNull("Could not find base rules", baseRules);

		/*
		 * .git/info/excludes:
		 * /test.stp
		 * /notignored
		 *
		 * new/.gitignore:
		 * notarealfile
		 *
		 * new/a/.gitignore:
		 * <empty>
		 *
		 * new/a/b2/.gitignore:
		 * <does not exist>
		 *
		 * new/a/b1/.gitignore:
		 * /c
		 *
		 * new/a/b1/c/.gitignore:
		 * !/shouldbeignored.txt
		 *
		 * .gitignore:
		 * !/notignored
		 * /commentNotIgnored.tx#t
		 * /commentIgnored.txt#comment
		 * /commentIgnored.txt #comment
		 */
		boolean result = isIgnored(getRelativePath(test));
		assertEquals(3, baseRules.getRules().size());
		assertTrue(db.getDirectory().getParentFile().toURI().equals(baseRules.getBaseDir().toURI()));
		//Test basic exclude file
		assertTrue("Did not match file " + test.toString(), result);
		//Test exclude file priority
		assertNotIgnored("notignored");
		//Test that /src/test.stp is not matched by /test.stp in exclude file (Do not reinitialize)
		assertNotIgnored("/src/test.stp");
		//Test file that is not mentioned -- should just return unmatched
		assertNotIgnored("not/mentioned/file.txt");

		//Test adding nonexistent node
		test = new File(db.getDirectory().getParentFile(), "new/a/b2/d/test.stp");
		assertNotIgnored("new/a/b2/d/test.stp");
		assertNotIgnored("new/a/b2/d/");
		assertNotIgnored("new/a/b2/d");

		//Test folder
		test = new File(db.getDirectory().getParentFile(), "new/a/b1/c");
		assertIgnored("new/a/b1/c");
		assertIgnored("new/a/b1/c/anything.c");
		assertIgnored("new/a/b1/c/and.o");
		assertIgnored("new/a/b1/c/everything.d");
		assertIgnored("new/a/b1/c/everything.d");
		//Special case -- the normally higher priority negation in c/.gitignore is cancelled by the folder being ignored
		assertIgnored("new/a/b1/c/shouldbeignored.txt");

		//Test name-only (use non-existent folders)
		assertNotIgnored("notarealfile");
		assertNotIgnored("/notarealfile");
		assertIgnored("new/notarealfile");
		assertIgnored("new/notarealfile/fake");
		assertIgnored("new/a/notarealfile");
		assertIgnored("new/a/b1/notarealfile");

		//Test clearing node -- create empty .gitignore
		createIgnoreFile(db.getDirectory().getParentFile() + "/new/a/b2/.gitignore", new String[0]);
		test = new File(db.getDirectory().getParentFile(), "new/a/b2/c");
		initCache();
		baseRules = cache.getRules("new/a/b2");
		assertNotNull(baseRules);
		baseRules.clear();
		assertEquals(baseRules.getRules().size(), 0);
		try {
			assertFalse("Node not properly cleared", baseRules.isIgnored(getRelativePath(test)));
		} catch (IOException e) {
			e.printStackTrace();
			fail("IO exception when testing base rules");
		}

		//Test clearing entire cache, and isEmpty
		assertNotNull(cache.getRules(""));
		assertFalse(cache.isEmpty());
		cache.clear();
		assertNull(cache.getRules(""));
		assertTrue(cache.isEmpty());
		assertNotIgnored("/anything");
		assertNotIgnored("/new/anything");
		assertNotIgnored("/src/anything");
	}

