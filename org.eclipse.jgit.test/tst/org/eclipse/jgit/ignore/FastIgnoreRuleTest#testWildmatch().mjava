	@Test
	public void testWildmatch() {
		assertMatched("**/a/b", "a/b");
		assertMatched("**/a/b", "c/a/b");
		assertMatched("**/a/b", "c/d/a/b");
		assertMatched("**/**/a/b", "c/d/a/b");

		assertMatched("/**/a/b", "a/b");
		assertMatched("/**/a/b", "c/a/b");
		assertMatched("/**/a/b", "c/d/a/b");
		assertMatched("/**/**/a/b", "c/d/a/b");

		assertMatched("a/b/**", "a/b/c");
		assertMatched("a/b/**", "a/b/c/d/");
		assertMatched("a/b/**/**", "a/b/c/d");

		assertMatched("**/a/**/b", "c/d/a/b");
		assertMatched("**/a/**/b", "c/d/a/e/b");
		assertMatched("**/**/a/**/**/b", "c/d/a/e/b");

		assertMatched("/**/a/**/b", "c/d/a/b");
		assertMatched("/**/a/**/b", "c/d/a/e/b");
		assertMatched("/**/**/a/**/**/b", "c/d/a/e/b");

		assertMatched("a/**/b", "a/b");
		assertMatched("a/**/b", "a/c/b");
		assertMatched("a/**/b", "a/c/d/b");
		assertMatched("a/**/**/b", "a/c/d/b");

		assertMatched("a/**/b/**/c", "a/c/b/d/c");
		assertMatched("a/**/**/b/**/**/c", "a/c/b/d/c");

		assertMatched("**/", "a/");
		assertMatched("**/", "a/b");
		assertMatched("**/", "a/b/c");
		assertMatched("**/**/", "a/");
		assertMatched("**/**/", "a/b");
		assertMatched("**/**/", "a/b/");
		assertMatched("**/**/", "a/b/c");
		assertMatched("x/**/", "x/a/");
		assertMatched("x/**/", "x/a/b");
		assertMatched("x/**/", "x/a/b/");
		assertMatched("**/x/", "a/x/");
		assertMatched("**/x/", "a/b/x/");
	}

