	@Test
	public void testTwoLevelSubtree() throws Exception {
		final DirCache dc = db.readDirCache();

		final String[] paths = { "a.", "a/b", "a/c/e", "a/c/f", "a/d", "a0b" };
		final DirCacheEntry[] ents = new DirCacheEntry[paths.length];
		for (int i = 0; i < paths.length; i++) {
			ents[i] = new DirCacheEntry(paths[i]);
			ents[i].setFileMode(FileMode.REGULAR_FILE);
		}
		final int aFirst = 1;
		final int aLast = 4;
		final int acFirst = 2;
		final int acLast = 3;

		final DirCacheBuilder b = dc.builder();
		for (int i = 0; i < ents.length; i++)
			b.add(ents[i]);
		b.finish();

		assertNull(dc.getCacheTree(false));
		final DirCacheTree root = dc.getCacheTree(true);
		assertNotNull(root);
		assertSame(root, dc.getCacheTree(true));
		assertEquals("", root.getNameString());
		assertEquals("", root.getPathString());
		assertEquals(1, root.getChildCount());
		assertEquals(dc.getEntryCount(), root.getEntrySpan());
		assertFalse(root.isValid());

		final DirCacheTree aTree = root.getChild(0);
		assertNotNull(aTree);
		assertSame(aTree, root.getChild(0));
		assertEquals("a", aTree.getNameString());
		assertEquals("a/", aTree.getPathString());
		assertEquals(1, aTree.getChildCount());
		assertEquals(aLast - aFirst + 1, aTree.getEntrySpan());
		assertFalse(aTree.isValid());

		final DirCacheTree acTree = aTree.getChild(0);
		assertNotNull(acTree);
		assertSame(acTree, aTree.getChild(0));
		assertEquals("c", acTree.getNameString());
		assertEquals("a/c/", acTree.getPathString());
		assertEquals(0, acTree.getChildCount());
		assertEquals(acLast - acFirst + 1, acTree.getEntrySpan());
		assertFalse(acTree.isValid());
	}

