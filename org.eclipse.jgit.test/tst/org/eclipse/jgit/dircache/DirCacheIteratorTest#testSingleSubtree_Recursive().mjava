	@Test
	public void testSingleSubtree_Recursive() throws Exception {
		final DirCache dc = DirCache.newInCore();

		final FileMode mode = FileMode.REGULAR_FILE;
		final String[] paths = { "a-", "a/b", "a/c", "a/d", "a0b" };
		final DirCacheEntry[] ents = new DirCacheEntry[paths.length];
		for (int i = 0; i < paths.length; i++) {
			ents[i] = new DirCacheEntry(paths[i]);
			ents[i].setFileMode(mode);
		}

		final DirCacheBuilder b = dc.builder();
		for (int i = 0; i < ents.length; i++)
			b.add(ents[i]);
		b.finish();

		final DirCacheIterator i = new DirCacheIterator(dc);
		try (final TreeWalk tw = new TreeWalk(db)) {
			tw.addTree(i);
			tw.setRecursive(true);
			int pathIdx = 0;
			while (tw.next()) {
				final DirCacheIterator c = tw.getTree(0, DirCacheIterator.class);
				assertNotNull(c);
				assertEquals(pathIdx, c.ptr);
				assertSame(ents[pathIdx], c.getDirCacheEntry());
				assertEquals(paths[pathIdx], tw.getPathString());
				assertEquals(mode.getBits(), tw.getRawMode(0));
				assertSame(mode, tw.getFileMode(0));
				pathIdx++;
			}
			assertEquals(paths.length, pathIdx);
		}
	}

