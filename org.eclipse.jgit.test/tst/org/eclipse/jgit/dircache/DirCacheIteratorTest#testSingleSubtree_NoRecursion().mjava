	@Test
	public void testSingleSubtree_NoRecursion() throws Exception {
		final DirCache dc = DirCache.newInCore();

		final String[] paths = { "a-", "a/b", "a/c", "a/d", "a0b" };
		final DirCacheEntry[] ents = new DirCacheEntry[paths.length];
		for (int i = 0; i < paths.length; i++) {
			ents[i] = new DirCacheEntry(paths[i]);
			ents[i].setFileMode(FileMode.REGULAR_FILE);
		}

		final DirCacheBuilder b = dc.builder();
		for (int i = 0; i < ents.length; i++)
			b.add(ents[i]);
		b.finish();

		final String[] expPaths = { "a-", "a", "a0b" };
		final FileMode[] expModes = { FileMode.REGULAR_FILE, FileMode.TREE,
				FileMode.REGULAR_FILE };
		final int expPos[] = { 0, -1, 4 };

		final DirCacheIterator i = new DirCacheIterator(dc);
		try (final TreeWalk tw = new TreeWalk(db)) {
			tw.addTree(i);
			tw.setRecursive(false);
			int pathIdx = 0;
			while (tw.next()) {
				assertSame(i, tw.getTree(0, DirCacheIterator.class));
				assertEquals(expModes[pathIdx].getBits(), tw.getRawMode(0));
				assertSame(expModes[pathIdx], tw.getFileMode(0));
				assertEquals(expPaths[pathIdx], tw.getPathString());

				if (expPos[pathIdx] >= 0) {
					assertEquals(expPos[pathIdx], i.ptr);
					assertSame(ents[expPos[pathIdx]], i.getDirCacheEntry());
				} else {
					assertSame(FileMode.TREE, tw.getFileMode(0));
				}

				pathIdx++;
			}
			assertEquals(expPaths.length, pathIdx);
		}
	}

