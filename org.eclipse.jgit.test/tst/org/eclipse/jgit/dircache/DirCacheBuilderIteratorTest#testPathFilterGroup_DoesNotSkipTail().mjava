	@Test
	public void testPathFilterGroup_DoesNotSkipTail() throws Exception {
		final DirCache dc = db.readDirCache();

		final FileMode mode = FileMode.REGULAR_FILE;
		final String[] paths = { "a-", "a/b", "a/c", "a/d", "a0b" };
		final DirCacheEntry[] ents = new DirCacheEntry[paths.length];
		for (int i = 0; i < paths.length; i++) {
			ents[i] = new DirCacheEntry(paths[i]);
			ents[i].setFileMode(mode);
		}
		{
			final DirCacheBuilder b = dc.builder();
			for (int i = 0; i < ents.length; i++)
				b.add(ents[i]);
			b.finish();
		}

		final int expIdx = 2;
		final DirCacheBuilder b = dc.builder();
		final TreeWalk tw = new TreeWalk(db);
		tw.addTree(new DirCacheBuildIterator(b));
		tw.setRecursive(true);
		tw.setFilter(PathFilterGroup.createFromStrings(Collections
				.singleton(paths[expIdx])));

		assertTrue("found " + paths[expIdx], tw.next());
		final DirCacheIterator c = tw.getTree(0, DirCacheIterator.class);
		assertNotNull(c);
		assertEquals(expIdx, c.ptr);
		assertSame(ents[expIdx], c.getDirCacheEntry());
		assertEquals(paths[expIdx], tw.getPathString());
		assertEquals(mode.getBits(), tw.getRawMode(0));
		assertSame(mode, tw.getFileMode(0));
		b.add(c.getDirCacheEntry());

		assertFalse("no more entries", tw.next());

		b.finish();
		assertEquals(ents.length, dc.getEntryCount());
		for (int i = 0; i < ents.length; i++)
			assertSame(ents[i], dc.getEntry(i));
	}

