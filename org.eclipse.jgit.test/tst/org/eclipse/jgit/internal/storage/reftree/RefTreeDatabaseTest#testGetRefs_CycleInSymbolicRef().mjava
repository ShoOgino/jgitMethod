	@Test
	public void testGetRefs_CycleInSymbolicRef() throws IOException {
		symref("refs/1", "refs/2");
		symref("refs/2", "refs/3");
		symref("refs/3", "refs/4");
		symref("refs/4", "refs/5");
		symref("refs/5", "refs/end");
		update("refs/end", A);

		Map<String, Ref> all = refdb.getRefs(ALL);
		Ref r = all.get("refs/1");
		assertNotNull("has 1", r);

		assertEquals("refs/1", r.getName());
		assertEquals(A, r.getObjectId());
		assertTrue(r.isSymbolic());

		r = r.getTarget();
		assertEquals("refs/2", r.getName());
		assertEquals(A, r.getObjectId());
		assertTrue(r.isSymbolic());

		r = r.getTarget();
		assertEquals("refs/3", r.getName());
		assertEquals(A, r.getObjectId());
		assertTrue(r.isSymbolic());

		r = r.getTarget();
		assertEquals("refs/4", r.getName());
		assertEquals(A, r.getObjectId());
		assertTrue(r.isSymbolic());

		r = r.getTarget();
		assertEquals("refs/5", r.getName());
		assertEquals(A, r.getObjectId());
		assertTrue(r.isSymbolic());

		r = r.getTarget();
		assertEquals("refs/end", r.getName());
		assertEquals(A, r.getObjectId());
		assertFalse(r.isSymbolic());

		symref("refs/5", "refs/6");
		symref("refs/6", "refs/end");
		all = refdb.getRefs(ALL);
		assertNull("mising 1 due to cycle", all.get("refs/1"));
		assertEquals(A, all.get("refs/2").getObjectId());
		assertEquals(A, all.get("refs/3").getObjectId());
		assertEquals(A, all.get("refs/4").getObjectId());
		assertEquals(A, all.get("refs/5").getObjectId());
		assertEquals(A, all.get("refs/6").getObjectId());
		assertEquals(A, all.get("refs/end").getObjectId());
	}

