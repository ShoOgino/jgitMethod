	@Test
	public void testBatchRefUpdate_ConflictCausesAbort() throws IOException {
		update("refs/heads/master", A);
		update("refs/heads/masters", B);
		ObjectId txnId = getTxnCommitted();

		List<ReceiveCommand> commands = Arrays.asList(
				command(A, B, "refs/heads/master"),
				command(null, A, "refs/heads/master/x"),
				command(null, A, "refs/heads"));
		BatchRefUpdate batchUpdate = refdb.newBatchUpdate();
		batchUpdate.setAllowNonFastForwards(true);
		batchUpdate.addCommand(commands);
		batchUpdate.execute(new RevWalk(repo), NullProgressMonitor.INSTANCE);
		assertEquals(txnId, getTxnCommitted());

		assertEquals(LOCK_FAILURE, commands.get(0).getResult());

		assertEquals(REJECTED_OTHER_REASON, commands.get(1).getResult());
		assertEquals(JGitText.get().transactionAborted,
				commands.get(1).getMessage());

		assertEquals(REJECTED_OTHER_REASON, commands.get(2).getResult());
		assertEquals(JGitText.get().transactionAborted,
				commands.get(2).getMessage());
	}

