	@Test
	public void testIsNameConflicting() throws IOException {
		update("refs/heads/a/b", A);
		update("refs/heads/q", B);

		// new references cannot replace an existing container
		assertTrue(refdb.isNameConflicting("refs"));
		assertTrue(refdb.isNameConflicting("refs/heads"));
		assertTrue(refdb.isNameConflicting("refs/heads/a"));

		// existing reference is not conflicting
		assertFalse(refdb.isNameConflicting("refs/heads/a/b"));

		// new references are not conflicting
		assertFalse(refdb.isNameConflicting("refs/heads/a/d"));
		assertFalse(refdb.isNameConflicting("refs/heads/master"));

		// existing reference must not be used as a container
		assertTrue(refdb.isNameConflicting("refs/heads/a/b/c"));
		assertTrue(refdb.isNameConflicting("refs/heads/q/master"));

		// refs/txn/ names always conflict.
		assertTrue(refdb.isNameConflicting(refdb.getTxnCommitted()));
		assertTrue(refdb.isNameConflicting("refs/txn/foo"));
	}

