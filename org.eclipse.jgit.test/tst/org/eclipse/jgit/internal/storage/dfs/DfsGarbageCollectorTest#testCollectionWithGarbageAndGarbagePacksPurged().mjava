	@Test
	public void testCollectionWithGarbageAndGarbagePacksPurged()
			throws Exception {
		RevCommit commit0 = commit().message("0").create();
		RevCommit commit1 = commit().message("1").parent(commit0).create();
		git.update("master", commit0);

		gcNoTtl();
		gcWithTtl();

		// The repository has an UNREACHABLE_GARBAGE pack that could have
		// expired, but since we never purge the most recent UNREACHABLE_GARBAGE
		// pack, it must have survived the GC.
		boolean commit1Found = false;
		for (DfsPackFile pack : odb.getPacks()) {
			DfsPackDescription d = pack.getPackDescription();
			if (d.getPackSource() == GC) {
				assertTrue("has commit0", isObjectInPack(commit0, pack));
				assertFalse("no commit1", isObjectInPack(commit1, pack));
			} else if (d.getPackSource() == UNREACHABLE_GARBAGE) {
				commit1Found |= isObjectInPack(commit1, pack);
			} else {
				fail("unexpected " + d.getPackSource());
			}
		}
		assertTrue("garbage commit1 still readable", commit1Found);

		// Find oldest UNREACHABLE_GARBAGE; it will be pruned by next GC.
		DfsPackDescription oldestGarbagePack = null;
		for (DfsPackFile pack : odb.getPacks()) {
			DfsPackDescription d = pack.getPackDescription();
			if (d.getPackSource() == UNREACHABLE_GARBAGE) {
				oldestGarbagePack = oldestPack(oldestGarbagePack, d);
			}
		}
		assertNotNull("has UNREACHABLE_GARBAGE", oldestGarbagePack);

		gcWithTtl();
		assertTrue("has packs", odb.getPacks().length > 0);
		for (DfsPackFile pack : odb.getPacks()) {
			assertNotEquals(oldestGarbagePack, pack.getPackDescription());
		}
	}

