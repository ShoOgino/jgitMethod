	@Test
	public void conflictThanksToDelete() throws IOException {
		writeLooseRefs("refs/heads/master", A, "refs/heads/masters", B);

		List<ReceiveCommand> cmds = Arrays.asList(
				new ReceiveCommand(A, B, "refs/heads/master", UPDATE),
				new ReceiveCommand(zeroId(), A, "refs/heads/masters/x", CREATE),
				new ReceiveCommand(B, zeroId(), "refs/heads/masters", DELETE));
		execute(newBatchUpdate(cmds).setAllowNonFastForwards(true));

		assertResults(cmds, OK, OK, OK);
		assertRefs("refs/heads/master", B, "refs/heads/masters/x", A);
		if (atomic) {
			assertEquals(2, refsChangedEvents);
		} else if (!useReftable) {
			// The non-atomic case actually produces 5 events, but that's an
			// implementation detail. We expect at least 4 events, one for the
			// initial read due to writeLooseRef(), and then one for each
			// successful ref update.
			assertTrue(refsChangedEvents >= 4);
		}
	}

