	@Test
	public void whileRefUpdatedRefUpdateSucceeds()
			throws Exception {
		RevBlob a = tr.blob("a");
		tr.lightweightTag("t", a);
		final RevBlob b = tr.blob("b");

		final CyclicBarrier refUpdateLockedRef = new CyclicBarrier(2);
		final CyclicBarrier packRefsDone = new CyclicBarrier(2);
		ExecutorService pool = Executors.newFixedThreadPool(2);
		try {
			Future<Result> result = pool.submit(() -> {
				RefUpdate update = new RefDirectoryUpdate(
						(RefDirectory) repo.getRefDatabase(),
						repo.exactRef("refs/tags/t")) {
					@Override
					public boolean isForceUpdate() {
						try {
							refUpdateLockedRef.await();
							packRefsDone.await();
						} catch (InterruptedException
								| BrokenBarrierException e) {
							Thread.currentThread().interrupt();
						}
						return super.isForceUpdate();
					}
				};
				update.setForceUpdate(true);
				update.setNewObjectId(b);
				return update.update();
			});

			Future<Result> result2 = pool.submit(() -> {
				refUpdateLockedRef.await();
				gc.packRefs();
				packRefsDone.await();
				return null;
			});
			assertNull(result2.get());

			assertSame(result.get(), Result.FORCED);

		} finally {
			pool.shutdownNow();
			pool.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
		}

		assertEquals(repo.exactRef("refs/tags/t").getObjectId(), b);
	}

