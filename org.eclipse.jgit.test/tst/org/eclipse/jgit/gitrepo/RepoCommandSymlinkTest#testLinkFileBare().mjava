	@Test
	public void testLinkFileBare() throws Exception {
		try (
				Repository remoteDb = createBareRepository();
				Repository tempDb = createWorkRepository()) {
			StringBuilder xmlContent = new StringBuilder();
			xmlContent
					.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n")
					.append("<manifest>")
					.append("<remote name=\"remote1\" fetch=\".\" />")
					.append("<default revision=\"master\" remote=\"remote1\" />")
					.append("<project path=\"foo\" name=\"").append(defaultUri)
					.append("\" revision=\"master\" >")
					.append("<linkfile src=\"hello.txt\" dest=\"LinkedHello\" />")
					.append("<linkfile src=\"hello.txt\" dest=\"foo/LinkedHello\" />")
					.append("<linkfile src=\"hello.txt\" dest=\"subdir/LinkedHello\" />")
					.append("</project>")
					.append("<project path=\"bar/baz\" name=\"")
					.append(defaultUri).append("\" revision=\"master\" >")
					.append("<linkfile src=\"hello.txt\" dest=\"bar/foo/LinkedHello\" />")
					.append("</project>").append("</manifest>");
			JGitTestUtil.writeTrashFile(tempDb, "manifest.xml",
					xmlContent.toString());
			RepoCommand command = new RepoCommand(remoteDb);
			command.setPath(
					tempDb.getWorkTree().getAbsolutePath() + "/manifest.xml")
					.setURI(rootUri).call();
			// Clone it
			File directory = createTempDirectory("testCopyFileBare");
			Repository localDb = Git.cloneRepository().setDirectory(directory)
					.setURI(remoteDb.getDirectory().toURI().toString()).call()
					.getRepository();

			// The LinkedHello symlink should exist.
			File linkedhello = new File(localDb.getWorkTree(), "LinkedHello");
			assertTrue("The LinkedHello file should exist",
					localDb.getFS().exists(linkedhello));
			assertTrue("The LinkedHello file should be a symlink",
					localDb.getFS().isSymLink(linkedhello));
			assertEquals("foo/hello.txt",
					localDb.getFS().readSymLink(linkedhello));

			// The foo/LinkedHello file should be skipped.
			File linkedfoohello = new File(localDb.getWorkTree(), "foo/LinkedHello");
			assertFalse("The foo/LinkedHello file should be skipped",
					localDb.getFS().exists(linkedfoohello));

			// The subdir/LinkedHello file should use a relative ../
			File linkedsubdirhello = new File(localDb.getWorkTree(),
					"subdir/LinkedHello");
			assertTrue("The subdir/LinkedHello file should exist",
					localDb.getFS().exists(linkedsubdirhello));
			assertTrue("The subdir/LinkedHello file should be a symlink",
					localDb.getFS().isSymLink(linkedsubdirhello));
			assertEquals("../foo/hello.txt",
					localDb.getFS().readSymLink(linkedsubdirhello));

			// The bar/foo/LinkedHello file should use a single relative ../
			File linkedbarfoohello = new File(localDb.getWorkTree(),
					"bar/foo/LinkedHello");
			assertTrue("The bar/foo/LinkedHello file should exist",
					localDb.getFS().exists(linkedbarfoohello));
			assertTrue("The bar/foo/LinkedHello file should be a symlink",
					localDb.getFS().isSymLink(linkedbarfoohello));
			assertEquals("../baz/hello.txt",
					localDb.getFS().readSymLink(linkedbarfoohello));

			localDb.close();
		}
	}

