	@Test
	public void testRevFilterReceivesParsedCommits() throws Exception {
		final RevCommit a = commit();
		final RevCommit b = commit(a);
		final RevCommit c = commit(b);

		final AtomicBoolean filterRan = new AtomicBoolean();
		RevFilter testFilter = new RevFilter() {

			@Override
			public boolean include(RevWalk walker, RevCommit cmit)
					throws StopWalkException, MissingObjectException,
					IncorrectObjectTypeException, IOException {
				assertNotNull("commit is parsed", cmit.getRawBuffer());
				filterRan.set(true);
				return true;
			}

			@Override
			public RevFilter clone() {
				return this;
			}

			@Override
			public boolean requiresCommitBody() {
				return true;
			}
		};

		// Do an initial run through the walk
		filterRan.set(false);
		rw.setRevFilter(testFilter);
		markStart(c);
		rw.markUninteresting(b);
		for (RevCommit cmit = rw.next(); cmit != null; cmit = rw.next()) {
			// Don't dispose the body here, because we want to test the effect
			// of marking 'b' as uninteresting.
		}
		assertTrue("filter ran", filterRan.get());

		// Run through the walk again, this time disposing of all commits.
		filterRan.set(false);
		rw.reset();
		markStart(c);
		for (RevCommit cmit = rw.next(); cmit != null; cmit = rw.next()) {
			cmit.disposeBody();
		}
		assertTrue("filter ran", filterRan.get());

		// Do the third run through the reused walk. Test that the explicitly
		// disposed commits are parsed on this walk.
		filterRan.set(false);
		rw.reset();
		markStart(c);
		for (RevCommit cmit = rw.next(); cmit != null; cmit = rw.next()) {
			// spin through the walk.
		}
		assertTrue("filter ran", filterRan.get());

	}

