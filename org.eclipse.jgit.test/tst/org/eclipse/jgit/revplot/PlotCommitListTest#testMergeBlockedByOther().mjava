	/**
	 * <pre>
	 *      b2
	 * a4   |
	 * |  \ |
	 * |    b1
	 * a3   |
	 * | \  |
	 * |  c |
	 * | /  |
	 * a2   |
	 * |    |
	 * |   /
	 * |  /
	 * a1
	 * </pre>
	 *
	 * @throws Exception
	 */
	@Test
	public void testMergeBlockedByOther() throws Exception {
		final RevCommit a1 = commit();
		final RevCommit b1 = commit(a1);
		final RevCommit a2 = commit(a1);
		final RevCommit c = commit(a2);// blocks merging arc
		final RevCommit a3 = commit(a2, c);
		final RevCommit a4 = commit(a3, b1);
		final RevCommit b2 = commit(b1);

		try (PlotWalk pw = new PlotWalk(db)) {
			pw.markStart(pw.lookupCommit(a4));
			pw.markStart(pw.lookupCommit(b2));
			pw.markStart(pw.lookupCommit(c));
			PlotCommitList<PlotLane> pcl = new PlotCommitList<>();
			pcl.source(pw);
			pcl.fillTo(Integer.MAX_VALUE);

			Set<Integer> positions = asSet(0, 1, 2);
			CommitListAssert test = new CommitListAssert(pcl);
			int posB = test.commit(b2).lanePos(positions).getLanePos();
			int posA = test.commit(a4).lanePos(positions).getLanePos();
			test.commit(b1).lanePos(posB); // repositioned to go around c
			test.commit(a3).lanePos(posA);
			test.commit(c).lanePos(positions);
			test.commit(a2).lanePos(posA);
			test.commit(a1).lanePos(posA);
			test.noMoreCommits();
		}
	}

