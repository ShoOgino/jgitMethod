	@Test
	public void testTrivialTwoWay_concurrentSubtreeChange() throws Exception {
		DirCache treeB = db.readDirCache();
		DirCache treeO = db.readDirCache();
		DirCache treeT = db.readDirCache();

		DirCacheBuilder bTreeBuilder = treeB.builder();
		DirCacheBuilder oTreeBuilder = treeO.builder();
		DirCacheBuilder tTreeBuilder = treeT.builder();

		bTreeBuilder.add(createEntry("d/o", FileMode.REGULAR_FILE));
		bTreeBuilder.add(createEntry("d/t", FileMode.REGULAR_FILE));

		oTreeBuilder.add(createEntry("d/o", FileMode.REGULAR_FILE, "o !"));
		oTreeBuilder.add(createEntry("d/t", FileMode.REGULAR_FILE));

		tTreeBuilder.add(createEntry("d/o", FileMode.REGULAR_FILE));
		tTreeBuilder.add(createEntry("d/t", FileMode.REGULAR_FILE, "t !"));

		bTreeBuilder.finish();
		oTreeBuilder.finish();
		tTreeBuilder.finish();

		ObjectInserter ow = db.newObjectInserter();
		ObjectId b = commit(ow, treeB, new ObjectId[] {});
		ObjectId o = commit(ow, treeO, new ObjectId[] { b });
		ObjectId t = commit(ow, treeT, new ObjectId[] { b });

		Merger ourMerger = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger(db);
		boolean merge = ourMerger.merge(new ObjectId[] { o, t });
		assertTrue(merge);

		try (TreeWalk tw = new TreeWalk(db)) {
			tw.setRecursive(true);
			tw.reset(ourMerger.getResultTreeId());

			assertTrue(tw.next());
			assertEquals("d/o", tw.getPathString());
			assertCorrectId(treeO, tw);

			assertTrue(tw.next());
			assertEquals("d/t", tw.getPathString());
			assertCorrectId(treeT, tw);

			assertFalse(tw.next());
		}
	}

