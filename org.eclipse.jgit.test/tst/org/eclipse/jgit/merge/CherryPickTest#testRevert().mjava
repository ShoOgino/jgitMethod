	@Test
	public void testRevert() throws Exception {
		// B---P---T
		//
		// Revert P, this should result in a tree with a
		// from B and t from T as the change to a in P
		// and addition of t in P is reverted.
		//
		// We use the standard merge, but change the order
		// of the sources.
		//
		final DirCache treeB = db.readDirCache();
		final DirCache treeP = db.readDirCache();
		final DirCache treeT = db.readDirCache();
		{
			final DirCacheBuilder b = treeB.builder();
			final DirCacheBuilder p = treeP.builder();
			final DirCacheBuilder t = treeT.builder();

			b.add(createEntry("a", FileMode.REGULAR_FILE));

			p.add(createEntry("a", FileMode.REGULAR_FILE, "q"));
			p.add(createEntry("p-fail", FileMode.REGULAR_FILE));

			t.add(createEntry("a", FileMode.REGULAR_FILE, "q"));
			t.add(createEntry("p-fail", FileMode.REGULAR_FILE));
			t.add(createEntry("t", FileMode.REGULAR_FILE));

			b.finish();
			p.finish();
			t.finish();
		}

		final ObjectInserter ow = db.newObjectInserter();
		final ObjectId B = commit(ow, treeB, new ObjectId[] {});
		final ObjectId P = commit(ow, treeP, new ObjectId[] { B });
		final ObjectId T = commit(ow, treeT, new ObjectId[] { P });

		ThreeWayMerger twm = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger(db);
		twm.setBase(P);
		boolean merge = twm.merge(new ObjectId[] { B, T });
		assertTrue(merge);

		try (TreeWalk tw = new TreeWalk(db)) {
			tw.setRecursive(true);
			tw.reset(twm.getResultTreeId());

			assertTrue(tw.next());
			assertEquals("a", tw.getPathString());
			assertCorrectId(treeB, tw);

			assertTrue(tw.next());
			assertEquals("t", tw.getPathString());
			assertCorrectId(treeT, tw);

			assertFalse(tw.next());
		}
	}

