	@Test
	public void testParallelThreadsWithDifferentLocales()
			throws InterruptedException, ExecutionException {

		final CyclicBarrier barrier = new CyclicBarrier(2);

		class GetBundle implements Callable<TranslationBundle> {

			private Locale locale;

			GetBundle(Locale locale) {
				this.locale = locale;
			}

			public TranslationBundle call() throws Exception {
				NLS.setLocale(locale);
				barrier.await(); // wait for the other thread to set its locale
				return GermanTranslatedBundle.get();
			}
		}

		ExecutorService pool = Executors.newFixedThreadPool(2);
		try {
			Future<TranslationBundle> root = pool.submit(new GetBundle(
					NLS.ROOT_LOCALE));
			Future<TranslationBundle> german = pool.submit(new GetBundle(
					Locale.GERMAN));
			assertEquals(NLS.ROOT_LOCALE, root.get().effectiveLocale());
			assertEquals(Locale.GERMAN, german.get().effectiveLocale());
		} finally {
			pool.shutdown();
			pool.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);
		}
	}

