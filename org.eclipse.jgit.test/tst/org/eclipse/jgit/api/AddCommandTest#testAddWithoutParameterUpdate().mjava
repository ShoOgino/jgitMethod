	// the same three cases as in testAddWithParameterUpdate
	// file a exists in workdir and in index -> added
	// file b exists not in workdir but in index -> unchanged
	// file c exists in workdir but not in index -> added
	@Test
	public void testAddWithoutParameterUpdate() throws Exception {
		FileUtils.mkdir(new File(db.getWorkTree(), "sub"));
		File file = new File(db.getWorkTree(), "sub/a.txt");
		FileUtils.createNewFile(file);
		try (PrintWriter writer = new PrintWriter(file, UTF_8.name())) {
			writer.print("content");
		}

		File file2 = new File(db.getWorkTree(), "sub/b.txt");
		FileUtils.createNewFile(file2);
		try (PrintWriter writer = new PrintWriter(file2, UTF_8.name())) {
			writer.print("content b");
		}

		try (Git git = new Git(db)) {
			git.add().addFilepattern("sub").call();

			assertEquals(
					"[sub/a.txt, mode:100644, content:content]" +
					"[sub/b.txt, mode:100644, content:content b]",
					indexState(CONTENT));

			git.commit().setMessage("commit").call();

			// new unstaged file sub/c.txt
			File file3 = new File(db.getWorkTree(), "sub/c.txt");
			FileUtils.createNewFile(file3);
			try (PrintWriter writer = new PrintWriter(file3, UTF_8.name())) {
				writer.print("content c");
			}

			// file sub/a.txt is modified
			try (PrintWriter writer = new PrintWriter(file, UTF_8.name())) {
				writer.print("modified content");
			}

			// file sub/b.txt is deleted
			FileUtils.delete(file2);

			git.add().addFilepattern("sub").call();
			// change in sub/a.txt is staged
			// deletion of sub/b.txt is not staged
			// sub/c.txt is staged
			assertEquals(
					"[sub/a.txt, mode:100644, content:modified content]" +
					"[sub/b.txt, mode:100644, content:content b]" +
					"[sub/c.txt, mode:100644, content:content c]",
					indexState(CONTENT));
		}
	}

