	/**
	 * Transforms the same before-state as in
	 * {@link #testRebaseShouldIgnoreMergeCommits()} to the following.
	 * <p>
	 * This test should always rewrite E.
	 *
	 * <pre>
	 * A - B (master) - - -  C' - D' - F' (topic')
	 *   \                    \       /
	 *    C - D - F (topic)      - E'
	 *     \     /
	 *       - E (side)
	 * </pre>
	 *
	 * @param testConflict
	 * @throws Exception
	 */
	private void doTestRebasePreservingMerges(boolean testConflict)
			throws Exception {
		// create file1 on master
		writeTrashFile(FILE1, FILE1);
		git.add().addFilepattern(FILE1).call();
		RevCommit a = git.commit().setMessage("commit a").call();

		// create a topic branch
		createBranch(a, "refs/heads/topic");

		// update FILE1 on master
		writeTrashFile(FILE1, "blah");
		writeTrashFile("conflict", "b");
		git.add().addFilepattern(".").call();
		RevCommit b = git.commit().setMessage("commit b").call();

		checkoutBranch("refs/heads/topic");
		writeTrashFile("file3", "more changess");
		git.add().addFilepattern("file3").call();
		RevCommit c = git.commit().setMessage("commit c").call();

		// create a branch from the topic commit
		createBranch(c, "refs/heads/side");

		// second commit on topic
		writeTrashFile("file2", "file2");
		if (testConflict)
			writeTrashFile("conflict", "d");
		git.add().addFilepattern(".").call();
		RevCommit d = git.commit().setMessage("commit d").call();
		assertTrue(new File(db.getWorkTree(), "file2").exists());

		// switch to side branch and update file2
		checkoutBranch("refs/heads/side");
		writeTrashFile("file3", "more change");
		if (testConflict)
			writeTrashFile("conflict", "e");
		git.add().addFilepattern(".").call();
		RevCommit e = git.commit().setMessage("commit e").call();

		// switch back to topic and merge in side, creating f
		checkoutBranch("refs/heads/topic");
		MergeResult result = git.merge().include(e.getId())
				.setStrategy(MergeStrategy.RESOLVE).call();
		final RevCommit f;
		if (testConflict) {
			assertEquals(MergeStatus.CONFLICTING, result.getMergeStatus());
			assertEquals(Collections.singleton("conflict"), git.status().call()
					.getConflicting());
			// resolve
			writeTrashFile("conflict", "f resolved");
			git.add().addFilepattern("conflict").call();
			f = git.commit().setMessage("commit f").call();
		} else {
			assertEquals(MergeStatus.MERGED, result.getMergeStatus());
			try (RevWalk rw = new RevWalk(db)) {
				f = rw.parseCommit(result.getNewHead());
			}
		}

		RebaseResult res = git.rebase().setUpstream("refs/heads/master")
				.setPreserveMerges(true).call();
		if (testConflict) {
			// first there is a conflict whhen applying d
			assertEquals(Status.STOPPED, res.getStatus());
			assertEquals(Collections.singleton("conflict"), git.status().call()
					.getConflicting());
			assertTrue(read("conflict").contains("\nb\n=======\nd\n"));
			// resolve
			writeTrashFile("conflict", "d new");
			git.add().addFilepattern("conflict").call();
			res = git.rebase().setOperation(Operation.CONTINUE).call();

			// then there is a conflict when applying e
			assertEquals(Status.STOPPED, res.getStatus());
			assertEquals(Collections.singleton("conflict"), git.status().call()
					.getConflicting());
			assertTrue(read("conflict").contains("\nb\n=======\ne\n"));
			// resolve
			writeTrashFile("conflict", "e new");
			git.add().addFilepattern("conflict").call();
			res = git.rebase().setOperation(Operation.CONTINUE).call();

			// finally there is a conflict merging e'
			assertEquals(Status.STOPPED, res.getStatus());
			assertEquals(Collections.singleton("conflict"), git.status().call()
					.getConflicting());
			assertTrue(read("conflict").contains("\nd new\n=======\ne new\n"));
			// resolve
			writeTrashFile("conflict", "f new resolved");
			git.add().addFilepattern("conflict").call();
			res = git.rebase().setOperation(Operation.CONTINUE).call();
		}
		assertEquals(Status.OK, res.getStatus());

		if (testConflict)
			assertEquals("f new resolved", read("conflict"));
		assertEquals("blah", read(FILE1));
		assertEquals("file2", read("file2"));
		assertEquals("more change", read("file3"));

		try (RevWalk rw = new RevWalk(db)) {
			rw.markStart(rw.parseCommit(db.resolve("refs/heads/topic")));
			RevCommit newF = rw.next();
			assertDerivedFrom(newF, f);
			assertEquals(2, newF.getParentCount());
			RevCommit newD = rw.next();
			assertDerivedFrom(newD, d);
			if (testConflict)
				assertEquals("d new", readFile("conflict", newD));
			RevCommit newE = rw.next();
			assertDerivedFrom(newE, e);
			if (testConflict)
				assertEquals("e new", readFile("conflict", newE));
			assertEquals(newD, newF.getParent(0));
			assertEquals(newE, newF.getParent(1));
			assertDerivedFrom(rw.next(), c);
			assertEquals(b, rw.next());
			assertEquals(a, rw.next());
		}
	}

