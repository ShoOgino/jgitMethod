	@Test
	public void testMixedResetRetainsSizeAndModifiedTime() throws Exception {
		git = new Git(db);

		Files.setLastModifiedTime(writeTrashFile("a.txt", "a").toPath(),
				FileTime.from(Instant.now().minusSeconds(60)));
		assertNotNull(git.add().addFilepattern("a.txt").call());
		assertNotNull(git.commit().setMessage("a commit").call());

		Files.setLastModifiedTime(writeTrashFile("b.txt", "b").toPath(),
				FileTime.from(Instant.now().minusSeconds(60)));
		assertNotNull(git.add().addFilepattern("b.txt").call());
		RevCommit commit2 = git.commit().setMessage("b commit").call();
		assertNotNull(commit2);

		DirCache cache = db.readDirCache();

		DirCacheEntry aEntry = cache.getEntry("a.txt");
		assertNotNull(aEntry);
		assertTrue(aEntry.getLength() > 0);
		assertTrue(aEntry.getLastModifiedInstant().compareTo(EPOCH) > 0);

		DirCacheEntry bEntry = cache.getEntry("b.txt");
		assertNotNull(bEntry);
		assertTrue(bEntry.getLength() > 0);
		assertTrue(bEntry.getLastModifiedInstant().compareTo(EPOCH) > 0);

		assertSameAsHead(git.reset().setMode(ResetType.MIXED)
				.setRef(commit2.getName()).call());

		cache = db.readDirCache();

		DirCacheEntry mixedAEntry = cache.getEntry("a.txt");
		assertNotNull(mixedAEntry);
		assertEquals(aEntry.getLastModifiedInstant(),
				mixedAEntry.getLastModifiedInstant());
		assertEquals(aEntry.getLastModifiedInstant(),
				mixedAEntry.getLastModifiedInstant());

		DirCacheEntry mixedBEntry = cache.getEntry("b.txt");
		assertNotNull(mixedBEntry);
		assertEquals(bEntry.getLastModifiedInstant(),
				mixedBEntry.getLastModifiedInstant());
		assertEquals(bEntry.getLastModifiedInstant(),
				mixedBEntry.getLastModifiedInstant());
	}

