	@Test
	public void shouldFetchSubmodulesWhenOnDemandAndRevisionChanged()
			throws Exception {
		RevCommit update = updateSubmoduleRevision();
		FetchResult result = fetch(FetchRecurseSubmodulesMode.ON_DEMAND);

		// The first submodule should have been updated
		assertTrue(result.submoduleResults().containsKey("sub"));
		FetchResult subResult = result.submoduleResults().get("sub");

		// The second submodule should not get updated
		assertTrue(subResult.submoduleResults().isEmpty());
		assertSubmoduleFetchHeads(commit1, submodule2Head);

		// After fetch the parent repo's fetch head should be the commit
		// that updated the submodule.
		assertEquals(update,
				git2.getRepository().resolve(Constants.FETCH_HEAD));
	}

