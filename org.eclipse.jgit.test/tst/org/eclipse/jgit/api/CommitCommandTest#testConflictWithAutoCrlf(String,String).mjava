	private void testConflictWithAutoCrlf(String baseLf, String lf)
			throws Exception {
		try (Git git = new Git(db)) {
			// Commit a file with CR/LF into the index
			FileBasedConfig config = db.getConfig();
			config.setString("core", null, "autocrlf", "false");
			config.save();
			writeTrashFile("file.txt", "foo" + baseLf);
			git.add().addFilepattern("file.txt").call();
			git.commit().setMessage("Initial").call();
			// Switch to side branch
			git.checkout().setCreateBranch(true).setName("side").call();
			writeTrashFile("file.txt", "bar\r\n");
			git.add().addFilepattern("file.txt").call();
			RevCommit side = git.commit().setMessage("Side").call();
			// Switch back to master and commit a conflict with the given lf
			git.checkout().setName("master");
			writeTrashFile("file.txt", "foob" + lf);
			git.add().addFilepattern("file.txt").call();
			git.commit().setMessage("Second").call();
			// Switch on autocrlf=true
			config.setString("core", null, "autocrlf", "true");
			config.save();
			// Cherry pick side: conflict. Resolve with CR-LF and commit.
			CherryPickResult pick = git.cherryPick().include(side).call();
			assertEquals("Expected a cherry-pick conflict",
					CherryPickStatus.CONFLICTING, pick.getStatus());
			writeTrashFile("file.txt", "foobar\r\n");
			git.add().addFilepattern("file.txt").call();
			git.commit().setMessage("Second").call();
			assertEquals("[file.txt, mode:100644, content:foobar" + lf + "]",
					indexState(CONTENT));
		}
	}

