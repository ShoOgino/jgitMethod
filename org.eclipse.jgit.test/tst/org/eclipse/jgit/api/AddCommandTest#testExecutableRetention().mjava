	@Test
	public void testExecutableRetention() throws Exception {
		StoredConfig config = db.getConfig();
		config.setBoolean(ConfigConstants.CONFIG_CORE_SECTION, null,
				ConfigConstants.CONFIG_KEY_FILEMODE, true);
		config.save();

		FS executableFs = new FS() {

			@Override
			public boolean supportsExecute() {
				return true;
			}

			@Override
			public boolean setExecute(File f, boolean canExec) {
				return true;
			}

			@Override
			public ProcessBuilder runInShell(String cmd, String[] args) {
				return null;
			}

			@Override
			public boolean retryFailedLockFileCommit() {
				return false;
			}

			@Override
			public FS newInstance() {
				return this;
			}

			@Override
			protected File discoverGitExe() {
				return null;
			}

			@Override
			public boolean canExecute(File f) {
				try {
					return read(f).startsWith("binary:");
				} catch (IOException e) {
					return false;
				}
			}

			@Override
			public boolean isCaseSensitive() {
				return false;
			}
		};

		String path = "a.txt";
		String path2 = "a.sh";
		writeTrashFile(path, "content");
		writeTrashFile(path2, "binary: content");
		try (Git git = Git.open(db.getDirectory(), executableFs)) {
			git.add().addFilepattern(path).addFilepattern(path2).call();
			RevCommit commit1 = git.commit().setMessage("commit").call();
			try (TreeWalk walk = new TreeWalk(db)) {
				walk.addTree(commit1.getTree());
				walk.next();
				assertEquals(path2, walk.getPathString());
				assertEquals(FileMode.EXECUTABLE_FILE, walk.getFileMode(0));
				walk.next();
				assertEquals(path, walk.getPathString());
				assertEquals(FileMode.REGULAR_FILE, walk.getFileMode(0));
			}
		}
		config = db.getConfig();
		config.setBoolean(ConfigConstants.CONFIG_CORE_SECTION, null,
				ConfigConstants.CONFIG_KEY_FILEMODE, false);
		config.save();

		writeTrashFile(path2, "content2");
		writeTrashFile(path, "binary: content2");
		try (Git git2 = Git.open(db.getDirectory(), executableFs)) {
			git2.add().addFilepattern(path).addFilepattern(path2).call();
			RevCommit commit2 = git2.commit().setMessage("commit2").call();
			try (TreeWalk walk = new TreeWalk(db)) {
				walk.addTree(commit2.getTree());
				walk.next();
				assertEquals(path2, walk.getPathString());
				assertEquals(FileMode.EXECUTABLE_FILE, walk.getFileMode(0));
				walk.next();
				assertEquals(path, walk.getPathString());
				assertEquals(FileMode.REGULAR_FILE, walk.getFileMode(0));
			}
		}
	}

