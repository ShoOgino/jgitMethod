	@Test
	public void testRebaseFailsCantCherryPickMergeCommits()
			throws Exception {
		/**
		 * Create the following commits and then attempt to rebase topic onto
		 * master. This will fail as the cherry-pick list C, D, E an F contains
		 * a merge commit (F).
		 *
		 * <pre>
		 * A - B (master)
		 *   \
		 *    C - D - F (topic)
		 *     \      /
		 *      E  -  (side)
		 * </pre>
		 */
		// create file1 on master
		writeTrashFile(FILE1, FILE1);
		git.add().addFilepattern(FILE1).call();
		RevCommit first = git.commit().setMessage("Add file1").call();
		assertTrue(new File(db.getWorkTree(), FILE1).exists());

		// create a topic branch
		createBranch(first, "refs/heads/topic");

		// update FILE1 on master
		writeTrashFile(FILE1, "blah");
		git.add().addFilepattern(FILE1).call();
		git.commit().setMessage("updated file1 on master").call();

		checkoutBranch("refs/heads/topic");
		writeTrashFile("file3", "more changess");
		git.add().addFilepattern("file3").call();
		RevCommit topicCommit = git.commit()
				.setMessage("update file3 on topic").call();

		// create a branch from the topic commit
		createBranch(topicCommit, "refs/heads/side");

		// second commit on topic
		writeTrashFile("file2", "file2");
		git.add().addFilepattern("file2").call();
		git.commit().setMessage("Add file2").call();
		assertTrue(new File(db.getWorkTree(), "file2").exists());

		// switch to side branch and update file2
		checkoutBranch("refs/heads/side");
		writeTrashFile("file3", "more change");
		git.add().addFilepattern("file3").call();
		RevCommit sideCommit = git.commit().setMessage("update file2 on side")
				.call();

		// switch back to topic and merge in side
		checkoutBranch("refs/heads/topic");
		MergeResult result = git.merge().include(sideCommit.getId())
				.setStrategy(MergeStrategy.RESOLVE).call();
		assertEquals(MergeStatus.MERGED, result.getMergeStatus());

		try {
			RebaseResult rebase = git.rebase().setUpstream("refs/heads/master")
					.call();
			fail("MultipleParentsNotAllowedException expected: "
					+ rebase.getStatus());
		} catch (JGitInternalException e) {
			// expected
		}
	}

