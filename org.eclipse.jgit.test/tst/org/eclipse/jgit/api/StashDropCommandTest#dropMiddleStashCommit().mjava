	@Test
	public void dropMiddleStashCommit() throws Exception {
		write(committedFile, "content2");
		Ref stashRef = git.getRepository().exactRef(Constants.R_STASH);
		assertNull(stashRef);
		RevCommit firstStash = git.stashCreate().call();
		assertNotNull(firstStash);
		stashRef = git.getRepository().exactRef(Constants.R_STASH);
		assertNotNull(stashRef);
		assertEquals(firstStash,
				git.getRepository().exactRef(Constants.R_STASH).getObjectId());

		write(committedFile, "content3");
		RevCommit secondStash = git.stashCreate().call();
		assertNotNull(secondStash);
		stashRef = git.getRepository().exactRef(Constants.R_STASH);
		assertNotNull(stashRef);
		assertEquals(secondStash,
				git.getRepository().exactRef(Constants.R_STASH).getObjectId());

		write(committedFile, "content4");
		RevCommit thirdStash = git.stashCreate().call();
		assertNotNull(thirdStash);
		stashRef = git.getRepository().exactRef(Constants.R_STASH);
		assertNotNull(stashRef);
		assertEquals(thirdStash,
				git.getRepository().exactRef(Constants.R_STASH).getObjectId());

		assertEquals(thirdStash, git.stashDrop().setStashRef(1).call());
		stashRef = git.getRepository().exactRef(Constants.R_STASH);
		assertNotNull(stashRef);
		assertEquals(thirdStash, stashRef.getObjectId());

		ReflogReader reader = git.getRepository().getReflogReader(
				Constants.R_STASH);
		List<ReflogEntry> entries = reader.getReverseEntries();
		assertEquals(2, entries.size());
		assertEquals(ObjectId.zeroId(), entries.get(1).getOldId());
		assertEquals(firstStash, entries.get(1).getNewId());
		assertTrue(entries.get(1).getComment().length() > 0);
		assertEquals(entries.get(0).getOldId(), entries.get(1).getNewId());
		assertEquals(thirdStash, entries.get(0).getNewId());
		assertTrue(entries.get(0).getComment().length() > 0);
	}

