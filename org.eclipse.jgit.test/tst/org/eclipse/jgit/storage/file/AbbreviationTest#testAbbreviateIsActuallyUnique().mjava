	@SuppressWarnings("unchecked")
	public void testAbbreviateIsActuallyUnique() throws Exception {
		// This test is far more difficult. We have to manually craft
		// an input that contains collisions at a particular prefix,
		// but this is computationally difficult. Instead we force an
		// index file to have what we want.
		//

		ObjectId id = id("9d5b926ed164e8ee88d3b8b1e525d699adda01ba");
		byte[] idBuf = toByteArray(id);
		List<PackedObjectInfo> objects = new ArrayList<PackedObjectInfo>();
		for (int i = 0; i < 256; i++) {
			idBuf[9] = (byte) i;
			objects.add(new PackedObjectInfo(ObjectId.fromRaw(idBuf)));
		}

		String packName = "pack-" + id.name();
		File packDir = new File(db.getObjectDatabase().getDirectory(), "pack");
		File idxFile = new File(packDir, packName + ".idx");
		File packFile = new File(packDir, packName + ".pack");
		packDir.mkdir();
		OutputStream dst = new BufferedOutputStream(new FileOutputStream(
				idxFile));
		try {
			PackIndexWriter writer = new PackIndexWriterV2(dst);
			writer.write(objects, new byte[OBJECT_ID_LENGTH]);
		} finally {
			dst.close();
		}
		new FileOutputStream(packFile).close();

		assertEquals(id.abbreviate(20), reader.abbreviate(id, 2));

		Collection<ObjectId> matches = reader.resolve(id.abbreviate(8));
		assertNotNull(matches);
		assertEquals(objects.size(), matches.size());
		for (PackedObjectInfo info : objects)
			assertTrue("contains " + info.name(), matches.contains(info));

		assertNull("cannot resolve", db.resolve(id.abbreviate(8).name()));
		assertEquals(id, db.resolve(id.abbreviate(20).name()));
	}

