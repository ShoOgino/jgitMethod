	/**
	 * Try to parse the data provided by an InputStream to the format defined by
	 * {@link #VERSION}
	 *
	 * @param in
	 *            the {@link InputStream} from where to read the data
	 * @return an {@link LfsPointer} or <code>null</code> if the stream was not
	 *         parseable as LfsPointer
	 * @throws IOException
	 */
	@Nullable
	public static LfsPointer parseLfsPointer(InputStream in)
			throws IOException {
		boolean versionLine = false;
		LongObjectId id = null;
		long sz = -1;

		try (BufferedReader br = new BufferedReader(
				new InputStreamReader(in, StandardCharsets.UTF_8.name()))) {
			for (String s = br.readLine(); s != null; s = br.readLine()) {
				if (s.startsWith("#") || s.length() == 0) { //$NON-NLS-1$
					continue;
				} else if (s.startsWith("version") && s.length() > 8 //$NON-NLS-1$
						&& (s.substring(8).trim().equals(VERSION) ||
								s.substring(8).trim().equals(VERSION_LEGACY))) {
					versionLine = true;
				} else if (s.startsWith("oid sha256:")) { //$NON-NLS-1$
					id = LongObjectId.fromString(s.substring(11).trim());
				} else if (s.startsWith("size") && s.length() > 5) { //$NON-NLS-1$
					sz = Long.parseLong(s.substring(5).trim());
				}
			}
			if (versionLine && id != null && sz > -1) {
				return new LfsPointer(id, sz);
			}
		}
		return null;
	}

