	/**
	 * Determine URL of LFS server by looking into config parameters lfs.url,
	 * lfs.<remote>.url or remote.<remote>.url. The LFS server URL is computed
	 * from remote.<remote>.url by appending "/info/lfs"
	 *
	 * @param db
	 *            the repository to work with
	 * @param method
	 *            the method (GET,PUT,...) of the request this connection will
	 *            be used for
	 * @return the url for the lfs server. e.g.
	 *         "https://github.com/github/git-lfs.git/info/lfs"
	 * @throws IOException
	 */
	private HttpConnection getLfsConnection(Repository db, String method)
			throws IOException {
		StoredConfig config = db.getConfig();
		String lfsEndpoint = config.getString(Constants.LFS, null,
				ConfigConstants.CONFIG_KEY_URL);
		Map<String, String> additionalHeaders = new TreeMap<>();
		if (lfsEndpoint == null) {
			String remoteUrl = null;
			for (String remote : db.getRemoteNames()) {
				lfsEndpoint = config.getString(Constants.LFS, remote,
						ConfigConstants.CONFIG_KEY_URL);
				if (lfsEndpoint == null
						&& (remote.equals(
								org.eclipse.jgit.lib.Constants.DEFAULT_REMOTE_NAME))) {
					remoteUrl = config.getString(
							ConfigConstants.CONFIG_KEY_REMOTE, remote,
							ConfigConstants.CONFIG_KEY_URL);
				}
				break;
			}
			if (lfsEndpoint == null && remoteUrl != null) {
				try {
					URIish u = new URIish(remoteUrl);

					if ("ssh".equals(u.getScheme())) { //$NON-NLS-1$
						// discover and authenticate; git-lfs does "ssh -p
						// <port> -- <host> git-lfs-authenticate <project>
						// <upload/download>"
						String json = runSshCommand(u.setPath(""), db.getFS(), //$NON-NLS-1$
								"git-lfs-authenticate " + extractProjectName(u) //$NON-NLS-1$
										+ " " + Protocol.OPERATION_DOWNLOAD); //$NON-NLS-1$

						Protocol.Action action = new Gson().fromJson(json,
								Protocol.Action.class);
						additionalHeaders.putAll(action.header);
						lfsEndpoint = action.href;
					} else {
						lfsEndpoint = remoteUrl + Protocol.INFO_LFS_ENDPOINT;
					}
				} catch (Exception e) {
					lfsEndpoint = null; // could not discover
				}
			} else {
				lfsEndpoint = lfsEndpoint + Protocol.INFO_LFS_ENDPOINT;
			}
		}
		if (lfsEndpoint == null) {
			throw new LfsConfigInvalidException(LfsText.get().lfsNoDownloadUrl);
		}
		URL url = new URL(lfsEndpoint + Protocol.OBJECTS_LFS_ENDPOINT);
		HttpConnection connection = HttpTransport.getConnectionFactory().create(
				url, HttpSupport.proxyFor(ProxySelector.getDefault(), url));
		connection.setDoOutput(true);
		if (url.getProtocol().equals("https") //$NON-NLS-1$
				&& !config.getBoolean(HttpConfig.HTTP,
						HttpConfig.SSL_VERIFY_KEY, true)) {
			HttpSupport.disableSslVerify(connection);
		}
		connection.setRequestMethod(method);
		connection.setRequestProperty(HDR_ACCEPT,
				Protocol.CONTENTTYPE_VND_GIT_LFS_JSON);
		connection.setRequestProperty(HDR_CONTENT_TYPE,
				Protocol.CONTENTTYPE_VND_GIT_LFS_JSON);
		additionalHeaders
				.forEach((k, v) -> connection.setRequestProperty(k, v));
		return connection;
	}

