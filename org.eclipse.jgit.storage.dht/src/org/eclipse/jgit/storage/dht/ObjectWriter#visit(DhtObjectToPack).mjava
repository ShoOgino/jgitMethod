	private void visit(DhtObjectToPack obj) throws InterruptedException,
			DhtTimeoutException {
		// Plan the visit to the delta base before the object. This
		// ensures the base is in the stream first, and OFS_DELTA can
		// be used for the delta.
		//
		DhtObjectToPack base = (DhtObjectToPack) obj.getDeltaBase();
		if (base != null && base.visitOrder == 0) {
			// Use the current visit, even if its wrong. This will
			// prevent infinite recursion when there is a cycle in the
			// delta chain. Cycles are broken during writing, not in
			// the earlier planning phases.
			//
			obj.visitOrder = curVisit;
			visit(base);
		}

		ChunkKey key = obj.chunk;
		if (key != null) {
			Integer i = allVisits.get(key);
			if (i == null) {
				i = Integer.valueOf(1 + allVisits.size());
				allVisits.put(key, i);
			}
			curVisit = i.intValue();
		}

		if (obj.isFragmented()) {
			metaToRead.add(key);
			if (metaToRead.size() == batchSize)
				startBatch(Context.FAST_MISSING_OK);
		}
		obj.visitOrder = curVisit;
	}

