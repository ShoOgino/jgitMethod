	BaseChunk getBaseChunk(long position) throws DhtException {
		// Chunks are sorted by ascending relative_start order.
		// Thus for a pack sequence of: A B C, we have:
		//
		// -- C relative_start = 10,000
		// -- B relative_start = 20,000
		// -- A relative_start = 30,000
		//
		// Indicating that chunk C starts 10,000 bytes before us,
		// chunk B starts 20,000 bytes before us (and 10,000 before C),
		// chunk A starts 30,000 bytes before us (and 10,000 before B),
		//
		// If position falls within:
		//
		// -- C (10k), then position is between 0..10,000
		// -- B (20k), then position is between 10,000 .. 20,000
		// -- A (30k), then position is between 20,000 .. 30,000

		int high = baseChunks.size();
		int low = 0;
		while (low < high) {
			final int mid = (low + high) >>> 1;
			final BaseChunk base = baseChunks.get(mid);

			if (position > base.relativeStart) {
				low = mid + 1;

			} else if (mid == 0 || position == base.relativeStart) {
				return base;

			} else if (baseChunks.get(mid - 1).relativeStart < position) {
				return base;

			} else {
				high = mid;
			}
		}

		throw new DhtException(MessageFormat.format(
				DhtText.get().missingLongOffsetBase, chunkKey,
				Long.valueOf(position)));
	}

