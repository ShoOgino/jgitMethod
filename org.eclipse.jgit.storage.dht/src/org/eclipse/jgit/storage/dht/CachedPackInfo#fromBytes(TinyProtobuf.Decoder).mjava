	/**
	 * Parse info from the storage system.
	 *
	 * @param d
	 *            decoder for the message buffer.
	 * @return the info object.
	 */
	public static CachedPackInfo fromBytes(TinyProtobuf.Decoder d) {
		CachedPackInfo info = new CachedPackInfo();
		PARSE: for (;;) {
			switch (d.next()) {
			case 0:
				break PARSE;
			case 1:
				info.name = d.stringObjectId();
				continue;
			case 2:
				info.version = d.stringObjectId();
				continue;
			case 3:
				info.objectsTotal = d.int64();
				continue;
			case 4:
				info.objectsDelta = d.int64();
				continue;
			case 5:
				info.bytesTotal = d.int64();
				continue;
			case 6: {
				TinyProtobuf.Decoder m = d.message();
				for (;;) {
					switch (m.next()) {
					case 0:
						continue PARSE;
					case 1:
						info.tips.add(m.stringObjectId());
						continue;
					default:
						m.skip();
						continue;
					}
				}
			}
			case 7: {
				TinyProtobuf.Decoder m = d.message();
				for (;;) {
					switch (m.next()) {
					case 0:
						continue PARSE;
					case 1:
						info.chunks.add(ChunkKey.fromBytes(m));
						continue;
					default:
						m.skip();
						continue;
					}
				}
			}
			default:
				d.skip();
				continue;
			}
		}
		return info;
	}

