	public void get(Context options, Set<ChunkKey> keys,
			AsyncCallback<Collection<PackChunk.Members>> callback) {
		int cnt = keys.size();
		List<PackChunk.Members> out = new ArrayList<PackChunk.Members>(cnt);

		for (ChunkKey chunk : keys) {
			byte[] row = chunk.asBytes();
			MemTable.Cell cell;

			cell = table.get(row, colData.name());
			if (cell == null)
				continue;

			PackChunk.Members m = new PackChunk.Members();
			m.setChunkKey(chunk);
			m.setChunkData(cell.getValue());

			cell = table.get(row, colIndex.name());
			if (cell != null)
				m.setChunkIndex(cell.getValue());

			cell = table.get(row, colMeta.name());
			if (cell != null) {
				try {
					m.setMeta(ChunkMeta.parseFrom(cell.getValue()));
				} catch (InvalidProtocolBufferException err) {
					callback.onFailure(new DhtException(MessageFormat.format(
							DhtText.get().invalidChunkMeta, chunk), err));
					return;
				}
			}

			out.add(m);
		}

		callback.onSuccess(out);
	}

