	/**
	 * Start a mutation task.
	 *
	 * @param <T>
	 *            any type the task might return.
	 * @param task
	 *            the mutation task. The result of the task is discarded, so
	 *            callers should perform result validation within the task.
	 * @param size
	 *            number of bytes that are buffered within the task.
	 * @throws DhtException
	 *             a prior task has completed, and failed.
	 */
	protected <T> void start(final Callable<T> task, int size)
			throws DhtException {
		final int permits = permitsForSize(size);
		final Callable<T> op = new Callable<T>() {
			public T call() throws Exception {
				try {
					return task.call();
				} finally {
					spaceAvailable.release(permits);
				}
			}
		};

		if (flushing && finalTask == null) {
			// If invoked by flush(), don't start on an executor.
			//
			finalTask = op;
			return;
		}

		synchronized (runningLock) {
			if (!flushing)
				checkRunningTasks(false);
			running.add(executor.submit(op));
		}
	}

