	public void get(Context options, Set<ObjectIndexKey> objects,
			AsyncCallback<Map<ObjectIndexKey, Collection<ObjectInfo>>> callback) {
		Map<ObjectIndexKey, Collection<ObjectInfo>> out = new HashMap<ObjectIndexKey, Collection<ObjectInfo>>();

		for (ObjectIndexKey objId : objects) {
			for (MemTable.Cell cell : table.scanFamily(objId.asBytes(), colInfo)) {
				Collection<ObjectInfo> chunks = out.get(objId);
				ChunkKey chunkKey;
				if (chunks == null) {
					chunks = new ArrayList<ObjectInfo>(4);
					out.put(objId, chunks);
				}

				chunkKey = ChunkKey.fromBytes(colInfo.suffix(cell.getName()));
				try {
					chunks.add(new ObjectInfo(
							chunkKey,
							cell.getTimestamp(),
							GitStore.ObjectInfo.parseFrom(cell.getValue())));
				} catch (InvalidProtocolBufferException badCell) {
					callback.onFailure(new DhtException(MessageFormat.format(
							DhtText.get().invalidObjectInfo, objId, chunkKey),
							badCell));
					return;
				}
			}
		}

		callback.onSuccess(out);
	}

