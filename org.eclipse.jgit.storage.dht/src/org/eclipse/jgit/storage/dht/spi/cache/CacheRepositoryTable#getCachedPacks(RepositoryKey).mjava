	public Collection<CachedPackInfo> getCachedPacks(RepositoryKey repo)
			throws DhtException, TimeoutException {
		CacheKey memKey = nsCachedPack.key(repo);
		Sync<Map<CacheKey, byte[]>> sync = Sync.create();
		client.get(singleton(memKey), sync);

		Map<CacheKey, byte[]> result;
		try {
			result = sync.get(options.getTimeout());
		} catch (InterruptedException e) {
			throw new TimeoutException();
		} catch (TimeoutException timeout) {
			// Fall through and read the database directly.
			result = emptyMap();
		}

		byte[] data = result.get(memKey);
		if (data != null) {
			List<CachedPackInfo> r = new ArrayList<CachedPackInfo>();
			TinyProtobuf.Decoder d = TinyProtobuf.decode(data);
			for (;;) {
				switch (d.next()) {
				case 0:
					return r;
				case 1:
					r.add(CachedPackInfo.fromBytes(d.message()));
					continue;
				default:
					d.skip();
				}
			}
		}

		Collection<CachedPackInfo> r = db.getCachedPacks(repo);
		TinyProtobuf.Encoder e = TinyProtobuf.encode(1024);
		for (CachedPackInfo info : r)
			e.bytes(1, info.asBytes());
		client.modify(singleton(Change.put(memKey, e.asByteArray())), none);
		return r;
	}

