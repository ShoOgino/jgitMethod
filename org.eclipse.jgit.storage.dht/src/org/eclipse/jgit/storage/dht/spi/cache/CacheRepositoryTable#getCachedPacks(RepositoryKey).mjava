	public Collection<CachedPackInfo> getCachedPacks(RepositoryKey repo)
			throws DhtException, TimeoutException {
		CacheKey memKey = nsCachedPack.key(repo);
		Sync<Map<CacheKey, byte[]>> sync = Sync.create();
		client.get(singleton(memKey), sync);

		Map<CacheKey, byte[]> result;
		try {
			result = sync.get(options.getTimeout());
		} catch (InterruptedException e) {
			throw new TimeoutException();
		} catch (TimeoutException timeout) {
			// Fall through and read the database directly.
			result = emptyMap();
		}

		byte[] data = result.get(memKey);
		if (data != null) {
			try {
				return CachedPackInfoList.parseFrom(data).getPackList();
			} catch (InvalidProtocolBufferException e) {
				// Invalidate the cache entry and fall through.
				client.modify(singleton(Change.remove(memKey)), none);
			}
		}

		Collection<CachedPackInfo> r = db.getCachedPacks(repo);
		CachedPackInfoList.Builder list = CachedPackInfoList.newBuilder();
		list.addAllPack(r);
		client.modify(
				singleton(Change.put(memKey, list.build().toByteArray())),
				none);
		return r;
	}

