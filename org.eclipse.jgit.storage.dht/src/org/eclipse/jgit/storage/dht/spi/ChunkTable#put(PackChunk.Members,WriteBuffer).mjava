	/**
	 * Put some (or all) of a single chunk.
	 * <p>
	 * The higher level storage layer typically stores chunks in pieces. Its
	 * common to first store the data, then much later store the fragments and
	 * index. Sometimes all of the members are ready at once, and can be put
	 * together as a single unit. This method handles both approaches to storing
	 * a chunk.
	 * <p>
	 * Implementors must use a partial writing approach, for example:
	 *
	 * <pre>
	 *   ColumnUpdateList list = ...;
	 *   if (chunk.getChunkData() != null)
	 *     list.addColumn(&quot;chunk_data&quot;, chunk.getChunkData());
	 *   if (chunk.getChunkIndex() != null)
	 *     list.addColumn(&quot;chunk_index&quot;, chunk.getChunkIndex());
	 *   if (chunk.getFragments() != null)
	 *     list.addColumn(&quot;fragments&quot;, chunk.getFragments());
	 *   createOrUpdateRow(chunk.getChunkKey(), list);
	 * </pre>
	 *
	 * @param chunk
	 *            description of the chunk to be stored.
	 * @param buffer
	 *            buffer to enqueue the put onto.
	 * @throws DhtException
	 *             if the buffer flushed and an enqueued operation failed.
	 */
	public void put(PackChunk.Members chunk, WriteBuffer buffer)
			throws DhtException;

