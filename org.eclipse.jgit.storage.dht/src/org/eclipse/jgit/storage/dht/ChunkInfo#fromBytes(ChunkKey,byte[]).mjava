	/**
	 * Parse info from the storage system.
	 *
	 * @param chunkKey
	 *            the chunk the link points to.
	 * @param raw
	 *            the raw encoding of the info.
	 * @return the info object.
	 */
	public static ChunkInfo fromBytes(ChunkKey chunkKey, byte[] raw) {
		ChunkInfo info = new ChunkInfo();
		info.chunkKey = chunkKey;

		TinyProtobuf.Decoder d = TinyProtobuf.decode(raw);
		PARSE: for (;;) {
			switch (d.next()) {
			case 0:
				break PARSE;
			case 1:
				info.source = d.intEnum(Source.values());
				continue;
			case 2:
				info.objectType = d.int32();
				continue;
			case 3:
				info.fragment = d.bool();
				continue;
			case 4:
				info.cachedPack = CachedPackKey.fromBytes(d);
				continue;

			case 5: {
				TinyProtobuf.Decoder m = d.message();
				for (;;) {
					switch (m.next()) {
					case 0:
						continue PARSE;
					case 1:
						info.objectsTotal = m.int32();
						continue;
					case 2:
						info.objectsWhole = m.int32();
						continue;
					case 3:
						info.objectsOfsDelta = m.int32();
						continue;
					case 4:
						info.objectsRefDelta = m.int32();
						continue;
					default:
						m.skip();
						continue;
					}
				}
			}
			case 6:
				info.chunkSize = d.int32();
				continue;
			case 7:
				info.indexSize = d.int32();
				continue;
			case 8:
				info.metaSize = d.int32();
				continue;
			default:
				d.skip();
				continue;
			}
		}
		return info;
	}

