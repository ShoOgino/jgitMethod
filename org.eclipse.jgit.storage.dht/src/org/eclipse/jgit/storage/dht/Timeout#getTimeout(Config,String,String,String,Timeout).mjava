	/**
	 * Obtain a timeout from the configuration.
	 *
	 * @param cfg
	 *            configuration to read.
	 * @param section
	 *            section key to read.
	 * @param subsection
	 *            subsection to read, may be null.
	 * @param name
	 *            variable to read.
	 * @param defaultValue
	 *            default to return if no timeout is specified in the
	 *            configuration.
	 * @return the configured timeout.
	 */
	public static Timeout getTimeout(Config cfg, String section,
			String subsection, String name, Timeout defaultValue) {
		String valStr = cfg.getString(section, subsection, name);
		if (valStr == null)
			return defaultValue;

		valStr = valStr.trim();
		if (valStr.length() == 0)
			return defaultValue;

		Matcher m = matcher("^([1-9][0-9]*(?:\\.[0-9]*)?)\\s*(.*)$", valStr);
		if (!m.matches())
			throw notTimeUnit(section, subsection, name, valStr);

		String digits = m.group(1);
		String unitName = m.group(2).trim();

		long multiplier;
		TimeUnit unit;
		if ("".equals(unitName)) {
			multiplier = 1;
			unit = TimeUnit.MILLISECONDS;

		} else if (anyOf(unitName, "ms", "millisecond", "milliseconds")) {
			multiplier = 1;
			unit = TimeUnit.MILLISECONDS;

		} else if (anyOf(unitName, "s", "sec", "second", "seconds")) {
			multiplier = 1;
			unit = TimeUnit.SECONDS;

		} else if (anyOf(unitName, "m", "min", "minute", "minutes")) {
			multiplier = 60;
			unit = TimeUnit.SECONDS;

		} else if (anyOf(unitName, "h", "hr", "hour", "hours")) {
			multiplier = 3600;
			unit = TimeUnit.SECONDS;

		} else
			throw notTimeUnit(section, subsection, name, valStr);

		if (digits.indexOf('.') == -1) {
			try {
				return new Timeout(multiplier * Long.parseLong(digits), unit);
			} catch (NumberFormatException nfe) {
				throw notTimeUnit(section, subsection, name, valStr);
			}
		} else {
			double inputTime;
			try {
				inputTime = multiplier * Double.parseDouble(digits);
			} catch (NumberFormatException nfe) {
				throw notTimeUnit(section, subsection, name, valStr);
			}

			if (unit == TimeUnit.MILLISECONDS) {
				TimeUnit newUnit = TimeUnit.NANOSECONDS;
				long t = (long) (inputTime * newUnit.convert(1, unit));
				return new Timeout(t, newUnit);

			} else if (unit == TimeUnit.SECONDS && multiplier == 1) {
				TimeUnit newUnit = TimeUnit.MILLISECONDS;
				long t = (long) (inputTime * newUnit.convert(1, unit));
				return new Timeout(t, newUnit);

			} else {
				return new Timeout((long) inputTime, unit);
			}
		}
	}

