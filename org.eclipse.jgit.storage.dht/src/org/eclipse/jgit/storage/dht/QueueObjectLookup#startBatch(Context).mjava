	private synchronized void startBatch(final Context ctx) {
		final int batchSize = options.getObjectIndexBatchSize();
		final Map<ObjectIndexKey, T> batch = new HashMap<ObjectIndexKey, T>();
		while (toFind.hasNext() && batch.size() < batchSize) {
			T obj = toFind.next();
			batch.put(ObjectIndexKey.create(repo, obj), obj);
		}

		final AsyncCallback<Map<ObjectIndexKey, Collection<ObjectInfo>>> cb;

		cb = new AsyncCallback<Map<ObjectIndexKey, Collection<ObjectInfo>>>() {
			public void onSuccess(Map<ObjectIndexKey, Collection<ObjectInfo>> r) {
				processResults(ctx, batch, r);
			}

			public void onFailure(DhtException e) {
				processFailure(e);
			}
		};
		db.objectIndex().get(ctx, batch.keySet(), cb);
		runningBatches++;
	}

