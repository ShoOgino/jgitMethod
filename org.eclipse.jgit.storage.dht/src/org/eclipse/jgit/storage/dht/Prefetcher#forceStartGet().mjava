	private void forceStartGet() {
		// Use a LinkedHashSet so insertion order is iteration order.
		// This may help a provider that loads sequentially in the
		// set's iterator order to load in the order we want data.
		//
		LinkedHashSet<ChunkKey> toLoad = new LinkedHashSet<ChunkKey>();

		while (bytesReady + bytesLoading < highWaterMark && !queue.isEmpty()) {
			ChunkKey key = queue.removeFirst();

			stats.access(key).cntPrefetcher_Load++;
			toLoad.add(key);
			status.put(key, Status.LOADING);
			bytesLoading += averageChunkSize;

			// For the first chunk, start immediately to reduce the
			// startup latency associated with additional chunks.
			if (first)
				break;
		}

		if (!toLoad.isEmpty() && error == null)
			db.chunk().get(Context.LOCAL, toLoad, this);

		if (first) {
			first = false;
			maybeStartGet();
		}
	}

