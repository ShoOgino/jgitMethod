	@Test
	public void testLargeFragmentWithOfsDelta() throws IOException {
		DhtInserterOptions insOpt = new DhtInserterOptions().setChunkSize(256);
		@SuppressWarnings("unchecked")
		DhtRepository repo = (DhtRepository) new DhtRepositoryBuilder<DhtRepositoryBuilder, DhtRepository, MemoryDatabase>()
				.setInserterOptions(insOpt).setDatabase(db) //
				.setRepositoryName("test.git") //
				.setMustExist(false) //
				.build();
		repo.create(true);

		ObjectInserter.Formatter fmt = new ObjectInserter.Formatter();
		TemporaryBuffer.Heap pack = new TemporaryBuffer.Heap(64 * 1024);
		packHeader(pack, 3);

		byte[] data3 = new byte[4];
		Arrays.fill(data3, (byte) 0xf3);
		ObjectId id3 = fmt.idFor(OBJ_BLOB, data3);
		objectHeader(pack, OBJ_BLOB, data3.length);
		deflate(pack, data3);

		byte[] data0 = newArray(insOpt.getChunkSize() * 2);
		ObjectId id0 = fmt.idFor(OBJ_BLOB, data0);
		long pos0 = pack.length();
		objectHeader(pack, OBJ_BLOB, data0.length);
		store(pack, data0);
		assertTrue(pack.length() > insOpt.getChunkSize());

		byte[] data1 = clone(1, data0);
		ObjectId id1 = fmt.idFor(OBJ_BLOB, data1);
		byte[] delta1 = delta(data0, data1);
		long pos1 = pack.length();
		objectHeader(pack, OBJ_OFS_DELTA, delta1.length);
		writeOffset(pack, pos1 - pos0);
		deflate(pack, delta1);

		digest(pack);

		ObjectInserter ins = repo.newObjectInserter();
		try {
			InputStream is = new ByteArrayInputStream(pack.toByteArray());
			DhtPackParser p = (DhtPackParser) ins.newPackParser(is);
			PackLock lock = p.parse(NullProgressMonitor.INSTANCE);
			assertNull(lock);
		} finally {
			ins.release();
		}

		ObjectReader ctx = repo.newObjectReader();
		try {
			assertTrue(ctx.has(id0, OBJ_BLOB));
			assertTrue(ctx.has(id1, OBJ_BLOB));
			assertTrue(ctx.has(id3, OBJ_BLOB));
		} finally {
			ctx.release();
		}
	}

