	@Test
	public void testParse() throws IOException {
		DhtRepository repo = db.open("test.git");
		repo.create(true);

		ObjectInserter.Formatter fmt = new ObjectInserter.Formatter();
		byte[] data0 = new byte[512];
		Arrays.fill(data0, (byte) 0xf3);
		ObjectId id0 = fmt.idFor(OBJ_BLOB, data0);

		TemporaryBuffer.Heap pack = new TemporaryBuffer.Heap(64 * 1024);
		packHeader(pack, 4);
		objectHeader(pack, OBJ_BLOB, data0.length);
		deflate(pack, data0);

		byte[] data1 = clone(0x01, data0);
		byte[] delta1 = delta(data0, data1);
		ObjectId id1 = fmt.idFor(OBJ_BLOB, data1);
		objectHeader(pack, OBJ_REF_DELTA, delta1.length);
		id0.copyRawTo(pack);
		deflate(pack, delta1);

		byte[] data2 = clone(0x02, data1);
		byte[] delta2 = delta(data1, data2);
		ObjectId id2 = fmt.idFor(OBJ_BLOB, data2);
		objectHeader(pack, OBJ_REF_DELTA, delta2.length);
		id1.copyRawTo(pack);
		deflate(pack, delta2);

		byte[] data3 = clone(0x03, data2);
		byte[] delta3 = delta(data2, data3);
		ObjectId id3 = fmt.idFor(OBJ_BLOB, data3);
		objectHeader(pack, OBJ_REF_DELTA, delta3.length);
		id2.copyRawTo(pack);
		deflate(pack, delta3);
		digest(pack);

		ObjectInserter ins = repo.newObjectInserter();
		try {
			InputStream is = new ByteArrayInputStream(pack.toByteArray());
			DhtPackParser p = (DhtPackParser) ins.newPackParser(is);
			PackLock lock = p.parse(NullProgressMonitor.INSTANCE);
			assertNull(lock);
		} finally {
			ins.release();
		}

		ObjectReader ctx = repo.newObjectReader();
		try {
			assertTrue(ctx.has(id0, OBJ_BLOB));
			assertTrue(ctx.has(id1, OBJ_BLOB));
			assertTrue(ctx.has(id2, OBJ_BLOB));
			assertTrue(ctx.has(id3, OBJ_BLOB));
		} finally {
			ctx.release();
		}
	}

