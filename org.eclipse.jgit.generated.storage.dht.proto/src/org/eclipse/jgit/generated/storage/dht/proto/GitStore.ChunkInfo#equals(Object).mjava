    @java.lang.Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.eclipse.jgit.generated.storage.dht.proto.GitStore.ChunkInfo)) {
        return super.equals(obj);
      }
      org.eclipse.jgit.generated.storage.dht.proto.GitStore.ChunkInfo other = (org.eclipse.jgit.generated.storage.dht.proto.GitStore.ChunkInfo) obj;

      boolean result = true;
      result = result && (hasSource() == other.hasSource());
      if (hasSource()) {
        result = result &&
            (getSource() == other.getSource());
      }
      result = result && (hasObjectType() == other.hasObjectType());
      if (hasObjectType()) {
        result = result &&
            (getObjectType() == other.getObjectType());
      }
      result = result && (hasIsFragment() == other.hasIsFragment());
      if (hasIsFragment()) {
        result = result && (getIsFragment()
            == other.getIsFragment());
      }
      result = result && (hasCachedPackKey() == other.hasCachedPackKey());
      if (hasCachedPackKey()) {
        result = result && getCachedPackKey()
            .equals(other.getCachedPackKey());
      }
      result = result && (hasObjectCounts() == other.hasObjectCounts());
      if (hasObjectCounts()) {
        result = result && getObjectCounts()
            .equals(other.getObjectCounts());
      }
      result = result && (hasChunkSize() == other.hasChunkSize());
      if (hasChunkSize()) {
        result = result && (getChunkSize()
            == other.getChunkSize());
      }
      result = result && (hasIndexSize() == other.hasIndexSize());
      if (hasIndexSize()) {
        result = result && (getIndexSize()
            == other.getIndexSize());
      }
      result = result && (hasMetaSize() == other.hasMetaSize());
      if (hasMetaSize()) {
        result = result && (getMetaSize()
            == other.getMetaSize());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

