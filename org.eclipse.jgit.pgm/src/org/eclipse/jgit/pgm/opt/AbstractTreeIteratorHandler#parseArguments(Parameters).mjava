	/** {@inheritDoc} */
	@Override
	public int parseArguments(Parameters params) throws CmdLineException {
		final String name = params.getParameter(0);

		if (new File(name).isDirectory()) {
			setter.addValue(new FileTreeIterator(
				new File(name),
				FS.DETECTED,
				clp.getRepository().getConfig().get(WorkingTreeOptions.KEY)));
			return 1;
		}

		if (new File(name).isFile()) {
			final DirCache dirc;
			try {
				dirc = DirCache.read(new File(name), FS.DETECTED);
			} catch (IOException e) {
				throw new CmdLineException(clp, MessageFormat.format(CLIText.get().notAnIndexFile, name), e);
			}
			setter.addValue(new DirCacheIterator(dirc));
			return 1;
		}

		final ObjectId id;
		try {
			id = clp.getRepository().resolve(name);
		} catch (IOException e) {
			throw new CmdLineException(clp, CLIText.format(e.getMessage()));
		}
		if (id == null)
			throw new CmdLineException(clp,
					CLIText.format(CLIText.get().notATree), name);

		final CanonicalTreeParser p = new CanonicalTreeParser();
		try (ObjectReader curs = clp.getRepository().newObjectReader()) {
			p.reset(curs, clp.getRevWalk().parseTree(id));
		} catch (MissingObjectException | IncorrectObjectTypeException e) {
			CmdLineException cle = new CmdLineException(clp,
					CLIText.format(CLIText.get().notATree), name);
			cle.initCause(e);
			throw cle;
		} catch (IOException e) {
			throw new CmdLineException(clp,
					CLIText.format(CLIText.get().cannotReadBecause), name,
					e.getMessage());
		}

		setter.addValue(p);
		return 1;
	}

