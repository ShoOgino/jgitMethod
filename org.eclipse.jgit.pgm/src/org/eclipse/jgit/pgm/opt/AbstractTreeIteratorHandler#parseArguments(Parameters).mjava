	@Override
	public int parseArguments(final Parameters params) throws CmdLineException {
		final String name = params.getParameter(0);

		if (new File(name).isDirectory()) {
			setter.addValue(new FileTreeIterator(new File(name), FS.DETECTED));
			return 1;
		}

		if (new File(name).isFile()) {
			final DirCache dirc;
			try {
				dirc = DirCache.read(new File(name));
			} catch (IOException e) {
				throw new CmdLineException(MessageFormat.format(CLIText.get().notAnIndexFile, name), e);
			}
			setter.addValue(new DirCacheIterator(dirc));
			return 1;
		}

		final ObjectId id;
		try {
			id = clp.getRepository().resolve(name);
		} catch (IOException e) {
			throw new CmdLineException(e.getMessage());
		}
		if (id == null)
			throw new CmdLineException(MessageFormat.format(CLIText.get().notATree, name));

		final CanonicalTreeParser p = new CanonicalTreeParser();
		final WindowCursor curs = new WindowCursor();
		try {
			p.reset(clp.getRepository(), clp.getRevWalk().parseTree(id), curs);
		} catch (MissingObjectException e) {
			throw new CmdLineException(MessageFormat.format(CLIText.get().notATree, name));
		} catch (IncorrectObjectTypeException e) {
			throw new CmdLineException(MessageFormat.format(CLIText.get().notATree, name));
		} catch (IOException e) {
			throw new CmdLineException(MessageFormat.format(CLIText.get().cannotReadBecause, name, e.getMessage()));
		} finally {
			curs.release();
		}

		setter.addValue(p);
		return 1;
	}

