	@Override
	protected void run() throws Exception {
		// determine the merge strategy
		if (strategyName != null) {
			mergeStrategy = MergeStrategy.get(strategyName);
			if (mergeStrategy == null)
				throw die(MessageFormat.format(
						CLIText.get().unknownMergeStrategy, strategyName));
		}

		// determine the other revision we want to merge with HEAD
		final ObjectId src = db.resolve(ref + "^{commit}");
		if (src == null)
			throw die(MessageFormat.format(
					CLIText.get().refDoesNotExistOrNoCommit, ref));

		Git git = new Git(db);
		MergeResult result = git.merge().setStrategy(mergeStrategy)
				.include(src).call();

		switch (result.getMergeStatus()) {
		case ALREADY_UP_TO_DATE:
		case FAST_FORWARD:
			outw.println(result.getMergeStatus().toString());
			break;
		case CONFLICTING:
			for (String collidingPath : result.getConflicts().keySet())
				outw.println(MessageFormat.format(CLIText.get().mergeConflict,
						collidingPath));
			outw.println(CLIText.get().mergeFailed);
			break;
		case FAILED:
			for (Map.Entry<String, MergeFailureReason> entry : result
					.getFailingPaths().entrySet())
				switch (entry.getValue()) {
				case DIRTY_WORKTREE:
				case DIRTY_INDEX:
					outw.println(CLIText.get().dontOverwriteLocalChanges);
					outw.println("        " + entry.getKey());
					break;
				case COULD_NOT_DELETE:
					outw.println(CLIText.get().cannotDeleteFile);
					outw.println("        " + entry.getKey());
					break;
				}
			break;
		case MERGED:
			outw.println(MessageFormat.format(CLIText.get().mergeMadeBy,
					mergeStrategy.getName()));
			break;
		case NOT_SUPPORTED:
			outw.println(MessageFormat.format(
					CLIText.get().unsupportedOperation, result.toString()));
		}
	}

