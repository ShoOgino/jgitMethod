	private void execute(final String[] argv) throws Exception {
		final CmdLineParser clp = new CmdLineParser(this);
		try {
			clp.parseArgument(argv);
		} catch (CmdLineException err) {
			if (argv.length > 0 && !help) {
				System.err.println("fatal: " + err.getMessage());
				System.exit(1);
			}
		}

		if (argv.length == 0 || help) {
			final String ex = clp.printExample(ExampleMode.ALL);
			System.err.println("jgit" + ex + " command [ARG ...]");
			if (help) {
				System.err.println();
				clp.printUsage(System.err);
				System.err.println();
			} else if (subcommand == null) {
				System.err.println();
				System.err.println("The most commonly used commands are:");
				final CommandRef[] common = CommandCatalog.common();
				int width = 0;
				for (final CommandRef c : common)
					width = Math.max(width, c.getName().length());
				width += 2;

				for (final CommandRef c : common) {
					System.err.print(' ');
					System.err.print(c.getName());
					for (int i = c.getName().length(); i < width; i++)
						System.err.print(' ');
					System.err.print(c.getUsage());
					System.err.println();
				}
				System.err.println();
			}
			System.exit(1);
		}

		final TextBuiltin cmd = subcommand;
		if (cmd.requiresRepository()) {
			if (gitdir == null) {
				String gitDirEnv = SystemReader.getInstance().getenv(Constants.GIT_DIR_KEY);
				if (gitDirEnv != null)
					gitdir = new File(gitDirEnv);
			}
			if (gitdir == null)
				gitdir = findGitDir();

			File gitworktree;
			String gitWorkTreeEnv = SystemReader.getInstance().getenv(Constants.GIT_WORK_TREE_KEY);
			if (gitWorkTreeEnv != null)
				gitworktree = new File(gitWorkTreeEnv);
			else
				gitworktree = null;

			File indexfile;
			String indexFileEnv = SystemReader.getInstance().getenv(Constants.GIT_INDEX_KEY);
			if (indexFileEnv != null)
				indexfile = new File(indexFileEnv);
			else
				indexfile = null;

			File objectdir;
			String objectDirEnv = SystemReader.getInstance().getenv(Constants.GIT_OBJECT_DIRECTORY_KEY);
			if (objectDirEnv != null)
				objectdir = new File(objectDirEnv);
			else
				objectdir = null;

			File[] altobjectdirs;
			String altObjectDirEnv = SystemReader.getInstance().getenv(Constants.GIT_ALTERNATE_OBJECT_DIRECTORIES_KEY);
			if (altObjectDirEnv != null) {
				String[] parserdAltObjectDirEnv = altObjectDirEnv.split(File.pathSeparator);
				altobjectdirs = new File[parserdAltObjectDirEnv.length];
				for (int i = 0; i < parserdAltObjectDirEnv.length; i++)
					altobjectdirs[i] = new File(parserdAltObjectDirEnv[i]);
			} else
				altobjectdirs = null;

			if (gitdir == null || !gitdir.isDirectory()) {
				System.err.println("error: can't find git directory");
				System.exit(1);
			}
			cmd.init(new Repository(gitdir, gitworktree, objectdir, altobjectdirs, indexfile), gitdir);
		} else {
			cmd.init(null, gitdir);
		}
		try {
			cmd.execute(arguments.toArray(new String[arguments.size()]));
		} finally {
			if (cmd.out != null)
				cmd.out.flush();
		}
	}

