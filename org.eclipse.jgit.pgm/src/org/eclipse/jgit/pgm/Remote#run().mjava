	/** {@inheritDoc} */
	@Override
	protected void run() {
		try (Git git = new Git(db)) {
			if (command == null) {
				RemoteListCommand cmd = git.remoteList();
				List<RemoteConfig> remotes = cmd.call();
				print(remotes);
			} else if ("add".equals(command)) { //$NON-NLS-1$
				RemoteAddCommand cmd = git.remoteAdd();
				cmd.setName(name);
				cmd.setUri(new URIish(uri));
				cmd.call();
			} else if ("remove".equals(command) || "rm".equals(command)) { //$NON-NLS-1$ //$NON-NLS-2$
				RemoteRemoveCommand cmd = git.remoteRemove();
				cmd.setRemoteName(name);
				cmd.call();
			} else if ("set-url".equals(command)) { //$NON-NLS-1$
				RemoteSetUrlCommand cmd = git.remoteSetUrl();
				cmd.setRemoteName(name);
				cmd.setRemoteUri(new URIish(uri));
				cmd.setUriType(push ? UriType.PUSH : UriType.FETCH);
				cmd.call();
			} else if ("update".equals(command)) { //$NON-NLS-1$
				// reuse fetch command for basic implementation of remote update
				Fetch fetch = new Fetch();
				fetch.init(db, gitdir);

				// redirect the output stream
				StringWriter osw = new StringWriter();
				fetch.outw = new ThrowingPrintWriter(osw);
				// redirect the error stream
				StringWriter esw = new StringWriter();
				fetch.errw = new ThrowingPrintWriter(esw);

				List<String> fetchArgs = new ArrayList<>();
				if (verbose) {
					fetchArgs.add("--verbose"); //$NON-NLS-1$
				}
				if (prune) {
					fetchArgs.add("--prune"); //$NON-NLS-1$
				}
				if (name != null) {
					fetchArgs.add(name);
				}

				fetch.execute(fetchArgs.toArray(new String[0]));

				// flush the streams
				fetch.outw.flush();
				fetch.errw.flush();
				outw.println(osw.toString());
				errw.println(esw.toString());
			} else {
				throw new JGitInternalException(MessageFormat
						.format(CLIText.get().unknownSubcommand, command));
			}
		} catch (Exception e) {
			throw die(e.getMessage(), e);
		}
	}

