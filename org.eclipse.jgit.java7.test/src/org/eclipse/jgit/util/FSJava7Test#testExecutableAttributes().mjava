	@Test
	public void testExecutableAttributes() throws Exception {
		FS fs = FS.DETECTED;
		// If this assumption fails the test is halted and ignored.
		assumeTrue(fs instanceof FS_POSIX_Java7);

		File f = new File(trash, "bla");
		assertTrue(f.createNewFile());
		assertFalse(fs.canExecute(f));

		String umask = readUmask();
		assumeNotNull(umask);

		char others = umask.charAt(umask.length() - 1);

		boolean badUmask;
		if (others != '0' && others != '2' && others != '4' && others != '6') {
			// umask is set in the way that "others" can not "execute" => git
			// CLI will not set "execute" attribute for "others", so we also
			// don't care
			badUmask = true;
		} else {
			badUmask = false;
		}

		Set<PosixFilePermission> permissions = readPermissions(f);
		assertTrue(!permissions.contains(PosixFilePermission.OTHERS_EXECUTE));
		assertTrue(!permissions.contains(PosixFilePermission.GROUP_EXECUTE));
		assertTrue(!permissions.contains(PosixFilePermission.OWNER_EXECUTE));

		fs.setExecute(f, true);

		permissions = readPermissions(f);
		assertTrue("'owner' execute permission not set",
				permissions.contains(PosixFilePermission.OWNER_EXECUTE));
		assertTrue("'group' execute permission not set",
				permissions.contains(PosixFilePermission.GROUP_EXECUTE));
		if (badUmask) {
			assertFalse("'others' execute permission set",
					permissions.contains(PosixFilePermission.OTHERS_EXECUTE));
			System.err.println("WARNING: your system's umask: \"" + umask
					+ "\" doesn't allow FSJava7Test to test if setting posix"
					+ "  permissions for \"others\" works properly");
			assumeFalse(badUmask);
		} else {
			assertTrue("'others' execute permission not set",
					permissions.contains(PosixFilePermission.OTHERS_EXECUTE));
		}
	}

