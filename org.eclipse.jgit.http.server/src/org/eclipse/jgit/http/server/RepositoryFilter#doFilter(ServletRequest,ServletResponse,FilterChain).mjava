	/** {@inheritDoc} */
	@Override
	public void doFilter(final ServletRequest request,
			final ServletResponse response, final FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest req = (HttpServletRequest) request;
		HttpServletResponse res = (HttpServletResponse) response;

		if (request.getAttribute(ATTRIBUTE_REPOSITORY) != null) {
			context.log(MessageFormat.format(HttpServerText.get().internalServerErrorRequestAttributeWasAlreadySet
					, ATTRIBUTE_REPOSITORY
					, getClass().getName()));
			sendError(req, res, SC_INTERNAL_SERVER_ERROR);
			return;
		}

		String name = req.getPathInfo();
		while (name != null && 0 < name.length() && name.charAt(0) == '/')
			name = name.substring(1);
		if (name == null || name.length() == 0) {
			sendError(req, res, SC_NOT_FOUND);
			return;
		}

		try (Repository db = resolver.open(req, name)) {
			request.setAttribute(ATTRIBUTE_REPOSITORY, db);
			chain.doFilter(request, response);
		} catch (RepositoryNotFoundException e) {
			sendError(req, res, SC_NOT_FOUND);
			return;
		} catch (ServiceNotEnabledException e) {
			sendError(req, res, SC_FORBIDDEN, e.getMessage());
			return;
		} catch (ServiceNotAuthorizedException e) {
			res.sendError(SC_UNAUTHORIZED, e.getMessage());
			return;
		} catch (ServiceMayNotContinueException e) {
			sendError(req, res, e.getStatusCode(), e.getMessage());
			return;
		} finally {
			request.removeAttribute(ATTRIBUTE_REPOSITORY);
		}
	}

