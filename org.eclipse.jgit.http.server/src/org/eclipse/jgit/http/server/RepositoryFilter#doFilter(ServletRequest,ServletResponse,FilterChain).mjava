	public void doFilter(final ServletRequest request,
			final ServletResponse rsp, final FilterChain chain)
			throws IOException, ServletException {
		if (request.getAttribute(ATTRIBUTE_REPOSITORY) != null) {
			context.log(MessageFormat.format(HttpServerText.get().internalServerErrorRequestAttributeWasAlreadySet
					, ATTRIBUTE_REPOSITORY
					, getClass().getName()));
			((HttpServletResponse) rsp).sendError(SC_INTERNAL_SERVER_ERROR);
			return;
		}

		final HttpServletRequest req = (HttpServletRequest) request;

		String name = req.getPathInfo();
		while (name != null && 0 < name.length() && name.charAt(0) == '/')
			name = name.substring(1);
		if (name == null || name.length() == 0) {
			((HttpServletResponse) rsp).sendError(SC_NOT_FOUND);
			return;
		}

		final Repository db;
		try {
			db = resolver.open(req, name);
		} catch (RepositoryNotFoundException e) {
			sendError(SC_NOT_FOUND, req, (HttpServletResponse) rsp);
			return;
		} catch (ServiceNotEnabledException e) {
			sendError(SC_FORBIDDEN, req, (HttpServletResponse) rsp);
			return;
		} catch (ServiceNotAuthorizedException e) {
			((HttpServletResponse) rsp).sendError(SC_UNAUTHORIZED);
			return;
		}
		try {
			request.setAttribute(ATTRIBUTE_REPOSITORY, db);
			chain.doFilter(request, rsp);
		} finally {
			request.removeAttribute(ATTRIBUTE_REPOSITORY);
			db.close();
		}
	}

