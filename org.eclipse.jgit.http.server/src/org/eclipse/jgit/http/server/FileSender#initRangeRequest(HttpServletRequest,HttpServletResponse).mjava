	private boolean initRangeRequest(final HttpServletRequest req,
			final HttpServletResponse rsp) throws IOException {
		final Enumeration<String> rangeHeaders = getRange(req);
		if (!rangeHeaders.hasMoreElements()) {
			// No range headers, the request is fine.
			return true;
		}

		final String range = rangeHeaders.nextElement();
		if (rangeHeaders.hasMoreElements()) {
			// To simplify the code we support only one range.
			return false;
		}

		final int eq = range.indexOf('=');
		final int dash = range.indexOf('-');
		if (eq < 0 || dash < 0 || !range.startsWith("bytes=")) {
			return false;
		}

		final String ifRange = req.getHeader(HDR_IF_RANGE);
		if (ifRange != null && !getTailChecksum().equals(ifRange)) {
			// If the client asked us to verify the ETag and its not
			// what they expected we need to send the entire content.
			return true;
		}

		try {
			if (eq + 1 == dash) {
				// "bytes=-500" means last 500 bytes
				pos = Long.parseLong(range.substring(dash + 1));
				pos = fileLen - pos;
			} else {
				// "bytes=500-" (position 500 to end)
				// "bytes=500-1000" (position 500 to 1000)
				pos = Long.parseLong(range.substring(eq + 1, dash));
				if (dash < range.length() - 1) {
					end = Long.parseLong(range.substring(dash + 1));
					end++; // range was inclusive, want exclusive
				}
			}
		} catch (NumberFormatException e) {
			// We probably hit here because of a non-digit such as
			// "," appearing at the end of the first range telling
			// us there is a second range following. To simplify
			// the code we support only one range.
			return false;
		}

		if (end > fileLen) {
			end = fileLen;
		}
		if (pos >= end) {
			return false;
		}

		rsp.setStatus(SC_PARTIAL_CONTENT);
		rsp.setHeader(HDR_CONTENT_RANGE, "bytes " + pos + "-" + (end - 1) + "/"
				+ fileLen);
		source.seek(pos);
		return true;
	}

