	/**
	 * Obtains the passphrase/password for an encrypted private key via the
	 * {@link #getCredentialsProvider() configured CredentialsProvider}.
	 *
	 * @param uri
	 *            identifying the resource to obtain a password for
	 * @param message
	 *            optional message text to display; may be {@code null} or empty
	 *            if none
	 * @return the password entered, or {@code null}Â if no
	 *         {@link CredentialsProvider} is configured or none was entered
	 * @throws java.util.concurrent.CancellationException
	 *             if the user canceled the operation
	 * @since 5.10
	 */
	protected char[] getPassword(URIish uri, String message) {
		if (provider == null) {
			return null;
		}
		boolean haveMessage = !StringUtils.isEmptyOrNull(message);
		List<CredentialItem> items = new ArrayList<>(haveMessage ? 2 : 1);
		if (haveMessage) {
			items.add(new CredentialItem.InformationalMessage(message));
		}
		CredentialItem.Password password = new CredentialItem.Password(
				SshdText.get().keyEncryptedPrompt);
		items.add(password);
		try {
			boolean completed = provider.get(uri, items);
			char[] pass = password.getValue();
			if (!completed) {
				cancelAuthentication();
				return null;
			}
			return pass == null ? null : pass.clone();
		} finally {
			password.clear();
		}
	}

