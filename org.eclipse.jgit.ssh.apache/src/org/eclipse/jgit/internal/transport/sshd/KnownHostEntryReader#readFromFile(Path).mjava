	/**
	 * Reads a known_hosts file and returns all valid entries. Invalid entries
	 * are skipped (and a message is logged).
	 *
	 * @param path
	 *            of the file to read
	 * @return a {@link List} of all valid entries read from the file
	 * @throws IOException
	 *             if the file cannot be read.
	 */
	public static List<KnownHostEntry> readFromFile(Path path)
			throws IOException {
		List<KnownHostEntry> result = new LinkedList<>();
		try (BufferedReader r = Files.newBufferedReader(path, UTF_8)) {
			r.lines().forEachOrdered(l -> {
				if (l == null) {
					return;
				}
				String line = clean(l);
				if (line.isEmpty()) {
					return;
				}
				try {
					KnownHostEntry entry = parseHostEntry(line);
					if (entry != null) {
						result.add(entry);
					} else {
						LOG.warn(format(SshdText.get().knownHostsInvalidLine,
								path, line));
					}
				} catch (RuntimeException e) {
					LOG.warn(format(SshdText.get().knownHostsInvalidLine, path,
							line), e);
				}
			});
		}
		return result;
	}

