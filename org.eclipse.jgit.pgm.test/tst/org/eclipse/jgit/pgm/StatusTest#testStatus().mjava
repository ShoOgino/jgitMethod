	@Test
	public void testStatus() throws Exception {
		Git git = new Git(db);
		// Write all files
		writeTrashFile("tracked", "tracked");
		writeTrashFile("stagedNew", "stagedNew");
		writeTrashFile("stagedModified", "stagedModified");
		writeTrashFile("stagedDeleted", "stagedDeleted");
		writeTrashFile("trackedModified", "trackedModified");
		writeTrashFile("trackedDeleted", "trackedDeleted");
		writeTrashFile("untracked", "untracked");
		// Test untracked
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Untracked files:", //
						"",//
						"\tstagedDeleted", //
						"\tstagedModified", //
						"\tstagedNew", //
						"\ttracked", //
						"\ttrackedDeleted", //
						"\ttrackedModified", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Add to index
		git.add().addFilepattern("tracked").call();
		git.add().addFilepattern("stagedModified").call();
		git.add().addFilepattern("stagedDeleted").call();
		git.add().addFilepattern("trackedModified").call();
		git.add().addFilepattern("trackedDeleted").call();
		// Test staged count
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Changes to be committed:", //
						"", //
						"\tnew file:   stagedDeleted", //
						"\tnew file:   stagedModified", //
						"\tnew file:   tracked", //
						"\tnew file:   trackedDeleted", //
						"\tnew file:   trackedModified", //
						"", //
						"Untracked files:", //
						"", //
						"\tstagedNew", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Commit
		git.commit().setMessage("initial commit")
				.call();
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Untracked files:", //
						"", //
						"\tstagedNew", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Make some changes and stage them
		writeTrashFile("stagedModified", "stagedModified modified");
		deleteTrashFile("stagedDeleted");
		writeTrashFile("trackedModified", "trackedModified modified");
		deleteTrashFile("trackedDeleted");
		git.add().addFilepattern("stagedModified").call();
		git.rm().addFilepattern("stagedDeleted").call();
		git.add().addFilepattern("stagedNew").call();
		// Test staged/not-staged status
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Changes to be committed:", //
						"", //
						"\tdeleted:    stagedDeleted", //
						"\tmodified:   stagedModified", //
						"\tnew file:   stagedNew", //
						"", //
						"Changes not staged for commit:", //
						"", //
						"\tdeleted:    trackedDeleted", //
						"\tmodified:   trackedModified", //
						"", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Create unmerged file
		writeTrashFile("unmerged", "unmerged");
		git.add().addFilepattern("unmerged").call();
		// Commit pending changes
		git.add().addFilepattern("trackedModified").call();
		git.rm().addFilepattern("trackedDeleted").call();
		git.commit().setMessage("commit before branching").call();
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Checkout new branch
		git.checkout().setCreateBranch(true).setName("test").call();
		// Test branch status
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch test", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Commit change and checkout master again
		writeTrashFile("unmerged", "changed in test branch");
		git.add().addFilepattern("unmerged").call();
		RevCommit testBranch = git.commit()
				.setMessage("changed unmerged in test branch").call();
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch test", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		git.checkout().setName("master").call();
		// Change the same file and commit
		writeTrashFile("unmerged", "changed in master branch");
		git.add().addFilepattern("unmerged").call();
		git.commit().setMessage("changed unmerged in master branch").call();
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Merge test branch into master
		git.merge().include(testBranch.getId()).call();
		// Test unmerged status
		assertArrayOfLinesEquals(new String[] { // git status output
				"On branch master", //
						"Unmerged paths:", //
						"", //
						"\tboth modified:      unmerged", //
						"", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
		// Test detached head
		String commitId = db.getRef(Constants.MASTER).getObjectId().name();
		git.checkout().setName(commitId).call();
		assertArrayOfLinesEquals(new String[] { // git status output
				"Not currently on any branch.", //
						"Unmerged paths:", //
						"", //
						"\tboth modified:      unmerged", //
						"", //
						"Untracked files:", //
						"", //
						"\tuntracked", //
						"" //
				}, execute("git status")); //
	}

