	/**
	 * Steps:
	 * <ol>
	 * <li>Add file 'b'
	 * <li>Commit
	 * <li>Create branch '1'
	 * <li>Add folder 'a'
	 * <li>Commit
	 * <li>Replace folder 'a' by file 'a' in the working tree
	 * <li>Checkout branch '1'
	 * </ol>
	 * <p>
	 * The checkout has to delete folder but the workingtree contains a dirty
	 * file at this path. The checkout should fail like in native git.
	 *
	 * @throws Exception
	 */
	@Test
	public void fileModeTestMissingThenFolderWithFileInWorkingTree()
			throws Exception {
		try (Git git = new Git(db)) {
			writeTrashFile("b", "Hello world b");
			git.add().addFilepattern(".").call();
			git.commit().setMessage("add file b").call();
			Ref branch_1 = git.branchCreate().setName("branch_1").call();
			File folderA = new File(db.getWorkTree(), "a");
			FileUtils.mkdirs(folderA);
			writeTrashFile("a/c", "Hello world c");
			git.add().addFilepattern(".").call();
			git.commit().setMessage("add folder a").call();

			FileEntry entry = new FileTreeIterator.FileEntry(new File(
					db.getWorkTree(), "a"), db.getFS());
			assertEquals(FileMode.TREE, entry.getMode());

			FileUtils.delete(folderA, FileUtils.RECURSIVE);
			writeTrashFile("a", "b");

			entry = new FileTreeIterator.FileEntry(new File(db.getWorkTree(), "a"),
					db.getFS());
			assertEquals(FileMode.REGULAR_FILE, entry.getMode());

			try {
				git.checkout().setName(branch_1.getName()).call();
				fail("Don't get the expected conflict");
			} catch (CheckoutConflictException e) {
				assertEquals("[a]", e.getConflictingPaths().toString());
				entry = new FileTreeIterator.FileEntry(
						new File(db.getWorkTree(), "a"), db.getFS());
				assertEquals(FileMode.REGULAR_FILE, entry.getMode());
			}
		}
	}

