	private Set<CQ> queryOneProject(Project project) throws IOException {
		Map<String, String> p = new LinkedHashMap<String, String>();
		p.put("bugidtype", "include");
		p.put("chfieldto", "Now");
		p.put("component", project.getID());
		p.put("field-1-0-0", "component");
		p.put("type-1-0-0", "anyexact");
		p.put("value-1-0-0", project.getID());
		p.put("ctype", "csv");

		StringBuilder req = new StringBuilder();
		for (Map.Entry<String, String> e : p.entrySet()) {
			if (req.length() > 0)
				req.append('&');
			req.append(URLEncoder.encode(e.getKey(), "UTF-8"));
			req.append('=');
			req.append(URLEncoder.encode(e.getValue(), "UTF-8"));
		}
		URL csv = new URL(new URL(base, "buglist.cgi").toString() + "?" + req);

		req = new StringBuilder();
		for (String name : new String[] { "bug_severity", "bug_status",
				"resolution", "short_desc", "cf_license", "keywords" }) {
			if (req.length() > 0)
				req.append("%20");
			req.append(name);
		}
		setCookie(csv, "COLUMNLIST", req.toString());

		HttpURLConnection conn = open(csv);
		if (HttpSupport.response(conn) != HttpURLConnection.HTTP_OK) {
			throw new IOException("Query " + csv + " failed: "
					+ conn.getResponseCode() + " " + conn.getResponseMessage());
		}

		BufferedReader br = reader(conn);
		try {
			Set<CQ> cqs = new HashSet<CQ>();
			CSV in = new CSV(br);
			Map<String, String> row;
			while ((row = in.next()) != null) {
				CQ cq = parseOneCQ(row);
				if (cq != null)
					cqs.add(cq);
			}
			return cqs;
		} finally {
			br.close();
		}
	}

