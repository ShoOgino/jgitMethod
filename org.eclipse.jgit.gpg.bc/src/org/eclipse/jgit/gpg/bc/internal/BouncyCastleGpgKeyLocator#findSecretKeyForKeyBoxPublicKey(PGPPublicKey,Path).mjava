	private BouncyCastleGpgKey findSecretKeyForKeyBoxPublicKey(
			PGPPublicKey publicKey, Path userKeyboxPath)
			throws PGPException, CanceledException, UnsupportedCredentialItem,
			URISyntaxException {
		/*
		 * this is somewhat brute-force but there doesn't seem to be another
		 * way; we have to walk all private key files we find and try to open
		 * them
		 */

		PGPDigestCalculatorProvider calculatorProvider = new JcaPGPDigestCalculatorProviderBuilder()
				.build();

		try (Stream<Path> keyFiles = Files.walk(USER_SECRET_KEY_DIR)) {
			List<Path> allPaths = keyFiles.filter(Files::isRegularFile)
					.collect(Collectors.toCollection(ArrayList::new));
			if (allPaths.isEmpty()) {
				return null;
			}
			PBEProtectionRemoverFactory passphraseProvider = p -> {
				throw new EncryptedPgpKeyException();
			};
			for (int attempts = 0; attempts < 2; attempts++) {
				// Second pass will traverse only the encrypted keys with a real
				// passphrase provider.
				Iterator<Path> pathIterator = allPaths.iterator();
				while (pathIterator.hasNext()) {
					Path keyFile = pathIterator.next();
					try {
						PGPSecretKey secretKey = attemptParseSecretKey(keyFile,
								calculatorProvider, passphraseProvider,
								publicKey);
						pathIterator.remove();
						if (secretKey != null) {
							if (!secretKey.isSigningKey()) {
								throw new PGPException(MessageFormat.format(
										BCText.get().gpgNotASigningKey,
										signingKey));
							}
							return new BouncyCastleGpgKey(secretKey,
									userKeyboxPath);
						}
					} catch (EncryptedPgpKeyException e) {
						// Ignore; we'll try again.
					}
				}
				if (attempts > 0 || allPaths.isEmpty()) {
					break;
				}
				// allPaths contains only the encrypted keys now.
				passphraseProvider = new JcePBEProtectionRemoverFactory(
						passphrasePrompt.getPassphrase(
								publicKey.getFingerprint(), userKeyboxPath));
			}

			passphrasePrompt.clear();
			return null;
		} catch (RuntimeException e) {
			passphrasePrompt.clear();
			throw e;
		} catch (IOException e) {
			passphrasePrompt.clear();
			throw new PGPException(MessageFormat.format(
					BCText.get().gpgFailedToParseSecretKey,
					USER_SECRET_KEY_DIR.toAbsolutePath()), e);
		}
	}

